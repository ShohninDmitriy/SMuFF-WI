
if (window.innerWidth < 768) {
	[].slice.call(document.querySelectorAll('[data-bss-disabled-mobile]')).forEach(function (elem) {
		elem.classList.remove('animated');
		elem.removeAttribute('data-bss-hover-animate');
		elem.removeAttribute('data-aos');
	});
}

document.addEventListener('DOMContentLoaded', function() {

	var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bss-tooltip]'));
	var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
	  return new bootstrap.Tooltip(tooltipTriggerEl);
	})
}, false);
/**
  * bootstrap-switch - Turn checkboxes and radio buttons into toggle switches.
  *
  * @version v3.3.5
  * @homepage https://bttstrp.github.io/bootstrap-switch
  * @author Mattia Larentis <mattia@larentis.eu> (http://larentis.eu)
  * @license MIT
  */

(function(a,b){if('function'==typeof define&&define.amd)define(['jquery'],b);else if('undefined'!=typeof exports)b(require('jquery'));else{b(a.jquery),a.bootstrapSwitch={exports:{}}.exports}})(this,function(a){'use strict';function c(x,y){if(!(x instanceof y))throw new TypeError('Cannot call a class as a function')}function d(x,y){var z=x.state,A=x.size,B=x.disabled,C=x.readonly,D=x.indeterminate,E=x.inverse;return[z?'on':'off',A,B?'disabled':void 0,C?'readonly':void 0,D?'indeterminate':void 0,E?'inverse':void 0,y?'id-'+y:void 0].filter(function(F){return null==F})}function e(){return{state:this.$element.is(':checked'),size:this.$element.data('size'),animate:this.$element.data('animate'),disabled:this.$element.is(':disabled'),readonly:this.$element.is('[readonly]'),indeterminate:this.$element.data('indeterminate'),inverse:this.$element.data('inverse'),radioAllOff:this.$element.data('radio-all-off'),onColor:this.$element.data('on-color'),offColor:this.$element.data('off-color'),onText:this.$element.data('on-text'),offText:this.$element.data('off-text'),labelText:this.$element.data('label-text'),handleWidth:this.$element.data('handle-width'),labelWidth:this.$element.data('label-width'),baseClass:this.$element.data('base-class'),wrapperClass:this.$element.data('wrapper-class')}}function f(){var x=this,y=this.$on.add(this.$off).add(this.$label).css('width',''),z='auto'===this.options.handleWidth?Math.round(Math.max(this.$on.width(),this.$off.width())):this.options.handleWidth;return y.width(z),this.$label.width(function(A,B){return'auto'===x.options.labelWidth?B<z?z:B:x.options.labelWidth}),this.privateHandleWidth=this.$on.outerWidth(),this.privateLabelWidth=this.$label.outerWidth(),this.$container.width(2*this.privateHandleWidth+this.privateLabelWidth),this.$wrapper.width(this.privateHandleWidth+this.privateLabelWidth)}function g(){var x=this,y=0<arguments.length&&arguments[0]!==void 0?arguments[0]:this.ope;this.$container.css('margin-left',function(){var z=[0,'-'+x.privateHandleWidth+'px'];return x.options.indeterminate?'-'+x.privateHandleWidth/2+'px':y?x.options.inverse?z[1]:z[0]:x.options.inverse?z[0]:z[1]})}function h(x){return this.options.baseClass+'-'+x}function j(){var x=this,y=function(){x.setPrevOptions(),f.call(x),g.call(x),setTimeout(function(){return x.options.animate&&x.$wrapper.addClass(h.call(x,'animate'))},50)};if(this.$wrapper.is(':visible'))return void y();var z=window.setInterval(function(){return x.$wrapper.is(':visible')&&(y()||!0)&&window.clearInterval(z)},50)}function k(){var x=this;return this.$element.on({'setPreviousOptions.bootstrapSwitch':function(){return x.setPrevOptions()},'previousState.bootstrapSwitch':function(){x.options=x.prevOptions,x.options.indeterminate&&x.$wrapper.addClass(h.call(x,'indeterminate')),x.$element.prop('checked',x.options.state).trigger('change.bootstrapSwitch',!0)},'change.bootstrapSwitch':function(z,A){z.preventDefault(),z.stopImmediatePropagation();var B=x.$element.is(':checked');g.call(x,B);B===x.options.state||(x.options.state=B,x.$wrapper.toggleClass(h.call(x,'off')).toggleClass(h.call(x,'on')),!A&&(x.$element.is(':radio')&&u('[name="'+x.$element.attr('name')+'"]').not(x.$element).prop('checked',!1).trigger('change.bootstrapSwitch',!0),x.$element.trigger('switchChange.bootstrapSwitch',[B])))},'focus.bootstrapSwitch':function(z){z.preventDefault(),x.$wrapper.addClass(h.call(x,'focused'))},'blur.bootstrapSwitch':function(z){z.preventDefault(),x.$wrapper.removeClass(h.call(x,'focused'))},'keydown.bootstrapSwitch':function(z){!z.which||x.options.disabled||x.options.readonly||(37===z.which||39===z.which)&&(z.preventDefault(),z.stopImmediatePropagation(),x.state(39===z.which))}})}function l(){var x=this;return this.$on.on('click.bootstrapSwitch',function(y){return y.preventDefault(),y.stopPropagation(),x.state(!1),x.$element.trigger('focus.bootstrapSwitch')}),this.$off.on('click.bootstrapSwitch',function(y){return y.preventDefault(),y.stopPropagation(),x.state(!0),x.$element.trigger('focus.bootstrapSwitch')})}function m(){var x=this,y=void 0,z=void 0;this.$label.on({click:function(C){C.stopPropagation()},'mousedown.bootstrapSwitch touchstart.bootstrapSwitch':function(C){y||x.options.disabled||x.options.readonly||(C.preventDefault(),C.stopPropagation(),y=(C.pageX||C.originalEvent.touches[0].pageX)-parseInt(x.$container.css('margin-left'),10),x.options.animate&&x.$wrapper.removeClass(h.call(x,'animate')),x.$element.trigger('focus.bootstrapSwitch'))},'mousemove.bootstrapSwitch touchmove.bootstrapSwitch':function(C){if(null!=y){var D=(C.pageX||C.originalEvent.touches[0].pageX)-y;C.preventDefault(),D<-x.privateHandleWidth||0<D||(z=D,x.$container.css('margin-left',z+'px'))}},'mouseup.bootstrapSwitch touchend.bootstrapSwitch':function(C){if(y){if(C.preventDefault(),x.options.animate&&x.$wrapper.addClass(h.call(x,'animate')),z){var D=z>-(x.privateHandleWidth/2);z=!1,x.state(x.options.inverse?!D:D)}else x.state(!x.options.state);y=!1}},'mouseleave.bootstrapSwitch':function(){x.$label.trigger('mouseup.bootstrapSwitch')}})}function n(){var x=this,y=this.$element.closest('label');y.on('click',function(z){z.preventDefault(),z.stopImmediatePropagation(),z.target===y[0]&&x.toggleState()})}function o(){function x(){return u(this).data('bootstrap-switch')}function y(){return u(this).bootstrapSwitch('state',this.checked)}var z=this.$element.closest('form');z.data('bootstrap-switch')||z.on('reset.bootstrapSwitch',function(){window.setTimeout(function(){z.find('input').filter(x).each(y)},1)}).data('bootstrap-switch',!0)}function p(x){var y=this;return u.isArray(x)?x.map(function(z){return h.call(y,z)}):[h.call(this,x)]}var r=function(x){return x&&x.__esModule?x:{default:x}}(a),s=Object.assign||function(x){for(var z,y=1;y<arguments.length;y++)for(var A in z=arguments[y],z)Object.prototype.hasOwnProperty.call(z,A)&&(x[A]=z[A]);return x},t=function(){function x(y,z){for(var B,A=0;A<z.length;A++)B=z[A],B.enumerable=B.enumerable||!1,B.configurable=!0,'value'in B&&(B.writable=!0),Object.defineProperty(y,B.key,B)}return function(y,z,A){return z&&x(y.prototype,z),A&&x(y,A),y}}(),u=r.default||window.jQuery||window.$,w=function(){function x(y){var z=this,A=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};c(this,x),this.$element=u(y),this.options=u.extend({},u.fn.bootstrapSwitch.defaults,e.call(this),A),this.prevOptions={},this.$wrapper=u('<div>',{class:function(){return d(z.options,z.$element.attr('id')).map(function(C){return h.call(z,C)}).concat([z.options.baseClass],p.call(z,z.options.wrapperClass)).join(' ')}}),this.$container=u('<div>',{class:h.call(this,'container')}),this.$on=u('<span>',{html:this.options.onText,class:h.call(this,'handle-on')+' '+h.call(this,this.options.onColor)}),this.$off=u('<span>',{html:this.options.offText,class:h.call(this,'handle-off')+' '+h.call(this,this.options.offColor)}),this.$label=u('<span>',{html:this.options.labelText,class:h.call(this,'label')}),this.$element.on('init.bootstrapSwitch',function(){return z.options.onInit(y)}),this.$element.on('switchChange.bootstrapSwitch',function(){for(var B=arguments.length,C=Array(B),D=0;D<B;D++)C[D]=arguments[D];var E=z.options.onSwitchChange.apply(y,C);!1===E&&(z.$element.is(':radio')?u('[name="'+z.$element.attr('name')+'"]').trigger('previousState.bootstrapSwitch',!0):z.$element.trigger('previousState.bootstrapSwitch',!0))}),this.$container=this.$element.wrap(this.$container).parent(),this.$wrapper=this.$container.wrap(this.$wrapper).parent(),this.$element.before(this.options.inverse?this.$off:this.$on).before(this.$label).before(this.options.inverse?this.$on:this.$off),this.options.indeterminate&&this.$element.prop('indeterminate',!0),j.call(this),k.call(this),l.call(this),m.call(this),o.call(this),n.call(this),this.$element.trigger('init.bootstrapSwitch',this.options.state)}return t(x,[{key:'setPrevOptions',value:function(){this.prevOptions=s({},this.options)}},{key:'state',value:function(z,A){return'undefined'==typeof z?this.options.state:this.options.disabled||this.options.readonly||this.options.state&&!this.options.radioAllOff&&this.$element.is(':radio')?this.$element:(this.$element.is(':radio')?u('[name="'+this.$element.attr('name')+'"]').trigger('setPreviousOptions.bootstrapSwitch'):this.$element.trigger('setPreviousOptions.bootstrapSwitch'),this.options.indeterminate&&this.indeterminate(!1),this.$element.prop('checked',!!z).trigger('change.bootstrapSwitch',A),this.$element)}},{key:'toggleState',value:function(z){return this.options.disabled||this.options.readonly?this.$element:this.options.indeterminate?(this.indeterminate(!1),this.state(!0)):this.$element.prop('checked',!this.options.state).trigger('change.bootstrapSwitch',z)}},{key:'size',value:function(z){return'undefined'==typeof z?this.options.size:(null!=this.options.size&&this.$wrapper.removeClass(h.call(this,this.options.size)),z&&this.$wrapper.addClass(h.call(this,z)),f.call(this),g.call(this),this.options.size=z,this.$element)}},{key:'animate',value:function(z){return'undefined'==typeof z?this.options.animate:this.options.animate===!!z?this.$element:this.toggleAnimate()}},{key:'toggleAnimate',value:function(){return this.options.animate=!this.options.animate,this.$wrapper.toggleClass(h.call(this,'animate')),this.$element}},{key:'disabled',value:function(z){return'undefined'==typeof z?this.options.disabled:this.options.disabled===!!z?this.$element:this.toggleDisabled()}},{key:'toggleDisabled',value:function(){return this.options.disabled=!this.options.disabled,this.$element.prop('disabled',this.options.disabled),this.$wrapper.toggleClass(h.call(this,'disabled')),this.$element}},{key:'readonly',value:function(z){return'undefined'==typeof z?this.options.readonly:this.options.readonly===!!z?this.$element:this.toggleReadonly()}},{key:'toggleReadonly',value:function(){return this.options.readonly=!this.options.readonly,this.$element.prop('readonly',this.options.readonly),this.$wrapper.toggleClass(h.call(this,'readonly')),this.$element}},{key:'indeterminate',value:function(z){return'undefined'==typeof z?this.options.indeterminate:this.options.indeterminate===!!z?this.$element:this.toggleIndeterminate()}},{key:'toggleIndeterminate',value:function(){return this.options.indeterminate=!this.options.indeterminate,this.$element.prop('indeterminate',this.options.indeterminate),this.$wrapper.toggleClass(h.call(this,'indeterminate')),g.call(this),this.$element}},{key:'inverse',value:function(z){return'undefined'==typeof z?this.options.inverse:this.options.inverse===!!z?this.$element:this.toggleInverse()}},{key:'toggleInverse',value:function(){this.$wrapper.toggleClass(h.call(this,'inverse'));var z=this.$on.clone(!0),A=this.$off.clone(!0);return this.$on.replaceWith(A),this.$off.replaceWith(z),this.$on=A,this.$off=z,this.options.inverse=!this.options.inverse,this.$element}},{key:'onColor',value:function(z){return'undefined'==typeof z?this.options.onColor:(this.options.onColor&&this.$on.removeClass(h.call(this,this.options.onColor)),this.$on.addClass(h.call(this,z)),this.options.onColor=z,this.$element)}},{key:'offColor',value:function(z){return'undefined'==typeof z?this.options.offColor:(this.options.offColor&&this.$off.removeClass(h.call(this,this.options.offColor)),this.$off.addClass(h.call(this,z)),this.options.offColor=z,this.$element)}},{key:'onText',value:function(z){return'undefined'==typeof z?this.options.onText:(this.$on.html(z),f.call(this),g.call(this),this.options.onText=z,this.$element)}},{key:'offText',value:function(z){return'undefined'==typeof z?this.options.offText:(this.$off.html(z),f.call(this),g.call(this),this.options.offText=z,this.$element)}},{key:'labelText',value:function(z){return'undefined'==typeof z?this.options.labelText:(this.$label.html(z),f.call(this),this.options.labelText=z,this.$element)}},{key:'handleWidth',value:function(z){return'undefined'==typeof z?this.options.handleWidth:(this.options.handleWidth=z,f.call(this),g.call(this),this.$element)}},{key:'labelWidth',value:function(z){return'undefined'==typeof z?this.options.labelWidth:(this.options.labelWidth=z,f.call(this),g.call(this),this.$element)}},{key:'baseClass',value:function(){return this.options.baseClass}},{key:'wrapperClass',value:function(z){if('undefined'==typeof z)return this.options.wrapperClass;var y=z||u.fn.bootstrapSwitch.defaults.wrapperClass;return this.$wrapper.removeClass(p.call(this,this.options.wrapperClass).join(' ')),this.$wrapper.addClass(p.call(this,y).join(' ')),this.options.wrapperClass=y,this.$element}},{key:'radioAllOff',value:function(z){if('undefined'==typeof z)return this.options.radioAllOff;var A=!!z;return this.options.radioAllOff===A?this.$element:(this.options.radioAllOff=A,this.$element)}},{key:'onInit',value:function(z){return'undefined'==typeof z?this.options.onInit:(this.options.onInit=z||u.fn.bootstrapSwitch.defaults.onInit,this.$element)}},{key:'onSwitchChange',value:function(z){return'undefined'==typeof z?this.options.onSwitchChange:(this.options.onSwitchChange=z||u.fn.bootstrapSwitch.defaults.onSwitchChange,this.$element)}},{key:'destroy',value:function(){var z=this.$element.closest('form');return z.length&&z.off('reset.bootstrapSwitch').removeData('bootstrap-switch'),this.$container.children().not(this.$element).remove(),this.$element.unwrap().unwrap().off('.bootstrapSwitch').removeData('bootstrap-switch'),this.$element}}]),x}();u.fn.bootstrapSwitch=function(x){for(var z=arguments.length,A=Array(1<z?z-1:0),B=1;B<z;B++)A[B-1]=arguments[B];return Array.prototype.reduce.call(this,function(C,D){var E=u(D),F=E.data('bootstrap-switch'),G=F||new w(D,x);return F||E.data('bootstrap-switch',G),'string'==typeof x?G[x].apply(G,A):C},this)},u.fn.bootstrapSwitch.Constructor=w,u.fn.bootstrapSwitch.defaults={state:!0,size:null,animate:!0,disabled:!1,readonly:!1,indeterminate:!1,inverse:!1,radioAllOff:!1,onColor:'primary',offColor:'default',onText:'ON',offText:'OFF',labelText:'&nbsp',handleWidth:'auto',labelWidth:'auto',baseClass:'bootstrap-switch',wrapperClass:'wrapper',onInit:function(){},onSwitchChange:function(){}}});

/*! Sortable 1.13.0 - MIT | git://github.com/SortableJS/Sortable.git */
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t=t||self).Sortable=e()}(this,function(){"use strict";function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function a(){return(a=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o])}return t}).apply(this,arguments)}function I(i){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},e=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(e=e.concat(Object.getOwnPropertySymbols(r).filter(function(t){return Object.getOwnPropertyDescriptor(r,t).enumerable}))),e.forEach(function(t){var e,n,o;e=i,o=r[n=t],n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o})}return i}function l(t,e){if(null==t)return{};var n,o,i=function(t,e){if(null==t)return{};var n,o,i={},r=Object.keys(t);for(o=0;o<r.length;o++)n=r[o],0<=e.indexOf(n)||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(o=0;o<r.length;o++)n=r[o],0<=e.indexOf(n)||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}function e(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function t(t){if("undefined"!=typeof window&&window.navigator)return!!navigator.userAgent.match(t)}var w=t(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i),E=t(/Edge/i),c=t(/firefox/i),u=t(/safari/i)&&!t(/chrome/i)&&!t(/android/i),n=t(/iP(ad|od|hone)/i),i=t(/chrome/i)&&t(/android/i),r={capture:!1,passive:!1};function d(t,e,n){t.addEventListener(e,n,!w&&r)}function s(t,e,n){t.removeEventListener(e,n,!w&&r)}function h(t,e){if(e){if(">"===e[0]&&(e=e.substring(1)),t)try{if(t.matches)return t.matches(e);if(t.msMatchesSelector)return t.msMatchesSelector(e);if(t.webkitMatchesSelector)return t.webkitMatchesSelector(e)}catch(t){return!1}return!1}}function P(t,e,n,o){if(t){n=n||document;do{if(null!=e&&(">"===e[0]?t.parentNode===n&&h(t,e):h(t,e))||o&&t===n)return t;if(t===n)break}while(t=(i=t).host&&i!==document&&i.host.nodeType?i.host:i.parentNode)}var i;return null}var f,p=/\s+/g;function k(t,e,n){if(t&&e)if(t.classList)t.classList[n?"add":"remove"](e);else{var o=(" "+t.className+" ").replace(p," ").replace(" "+e+" "," ");t.className=(o+(n?" "+e:"")).replace(p," ")}}function R(t,e,n){var o=t&&t.style;if(o){if(void 0===n)return document.defaultView&&document.defaultView.getComputedStyle?n=document.defaultView.getComputedStyle(t,""):t.currentStyle&&(n=t.currentStyle),void 0===e?n:n[e];e in o||-1!==e.indexOf("webkit")||(e="-webkit-"+e),o[e]=n+("string"==typeof n?"":"px")}}function v(t,e){var n="";if("string"==typeof t)n=t;else do{var o=R(t,"transform");o&&"none"!==o&&(n=o+" "+n)}while(!e&&(t=t.parentNode));var i=window.DOMMatrix||window.WebKitCSSMatrix||window.CSSMatrix||window.MSCSSMatrix;return i&&new i(n)}function g(t,e,n){if(t){var o=t.getElementsByTagName(e),i=0,r=o.length;if(n)for(;i<r;i++)n(o[i],i);return o}return[]}function A(){var t=document.scrollingElement;return t||document.documentElement}function X(t,e,n,o,i){if(t.getBoundingClientRect||t===window){var r,a,l,s,c,u,d;if(d=t!==window&&t.parentNode&&t!==A()?(a=(r=t.getBoundingClientRect()).top,l=r.left,s=r.bottom,c=r.right,u=r.height,r.width):(l=a=0,s=window.innerHeight,c=window.innerWidth,u=window.innerHeight,window.innerWidth),(e||n)&&t!==window&&(i=i||t.parentNode,!w))do{if(i&&i.getBoundingClientRect&&("none"!==R(i,"transform")||n&&"static"!==R(i,"position"))){var h=i.getBoundingClientRect();a-=h.top+parseInt(R(i,"border-top-width")),l-=h.left+parseInt(R(i,"border-left-width")),s=a+r.height,c=l+r.width;break}}while(i=i.parentNode);if(o&&t!==window){var f=v(i||t),p=f&&f.a,g=f&&f.d;f&&(s=(a/=g)+(u/=g),c=(l/=p)+(d/=p))}return{top:a,left:l,bottom:s,right:c,width:d,height:u}}}function Y(t,e,n){for(var o=H(t,!0),i=X(t)[e];o;){var r=X(o)[n];if(!("top"===n||"left"===n?r<=i:i<=r))return o;if(o===A())break;o=H(o,!1)}return!1}function m(t,e,n){for(var o=0,i=0,r=t.children;i<r.length;){if("none"!==r[i].style.display&&r[i]!==Rt.ghost&&r[i]!==Rt.dragged&&P(r[i],n.draggable,t,!1)){if(o===e)return r[i];o++}i++}return null}function B(t,e){for(var n=t.lastElementChild;n&&(n===Rt.ghost||"none"===R(n,"display")||e&&!h(n,e));)n=n.previousElementSibling;return n||null}function F(t,e){var n=0;if(!t||!t.parentNode)return-1;for(;t=t.previousElementSibling;)"TEMPLATE"===t.nodeName.toUpperCase()||t===Rt.clone||e&&!h(t,e)||n++;return n}function b(t){var e=0,n=0,o=A();if(t)do{var i=v(t),r=i.a,a=i.d;e+=t.scrollLeft*r,n+=t.scrollTop*a}while(t!==o&&(t=t.parentNode));return[e,n]}function H(t,e){if(!t||!t.getBoundingClientRect)return A();var n=t,o=!1;do{if(n.clientWidth<n.scrollWidth||n.clientHeight<n.scrollHeight){var i=R(n);if(n.clientWidth<n.scrollWidth&&("auto"==i.overflowX||"scroll"==i.overflowX)||n.clientHeight<n.scrollHeight&&("auto"==i.overflowY||"scroll"==i.overflowY)){if(!n.getBoundingClientRect||n===document.body)return A();if(o||e)return n;o=!0}}}while(n=n.parentNode);return A()}function y(t,e){return Math.round(t.top)===Math.round(e.top)&&Math.round(t.left)===Math.round(e.left)&&Math.round(t.height)===Math.round(e.height)&&Math.round(t.width)===Math.round(e.width)}function D(e,n){return function(){if(!f){var t=arguments;1===t.length?e.call(this,t[0]):e.apply(this,t),f=setTimeout(function(){f=void 0},n)}}}function L(t,e,n){t.scrollLeft+=e,t.scrollTop+=n}function S(t){var e=window.Polymer,n=window.jQuery||window.Zepto;return e&&e.dom?e.dom(t).cloneNode(!0):n?n(t).clone(!0)[0]:t.cloneNode(!0)}function _(t,e){R(t,"position","absolute"),R(t,"top",e.top),R(t,"left",e.left),R(t,"width",e.width),R(t,"height",e.height)}function C(t){R(t,"position",""),R(t,"top",""),R(t,"left",""),R(t,"width",""),R(t,"height","")}var j="Sortable"+(new Date).getTime();function T(){var e,o=[];return{captureAnimationState:function(){o=[],this.options.animation&&[].slice.call(this.el.children).forEach(function(t){if("none"!==R(t,"display")&&t!==Rt.ghost){o.push({target:t,rect:X(t)});var e=I({},o[o.length-1].rect);if(t.thisAnimationDuration){var n=v(t,!0);n&&(e.top-=n.f,e.left-=n.e)}t.fromRect=e}})},addAnimationState:function(t){o.push(t)},removeAnimationState:function(t){o.splice(function(t,e){for(var n in t)if(t.hasOwnProperty(n))for(var o in e)if(e.hasOwnProperty(o)&&e[o]===t[n][o])return Number(n);return-1}(o,{target:t}),1)},animateAll:function(t){var c=this;if(!this.options.animation)return clearTimeout(e),void("function"==typeof t&&t());var u=!1,d=0;o.forEach(function(t){var e=0,n=t.target,o=n.fromRect,i=X(n),r=n.prevFromRect,a=n.prevToRect,l=t.rect,s=v(n,!0);s&&(i.top-=s.f,i.left-=s.e),n.toRect=i,n.thisAnimationDuration&&y(r,i)&&!y(o,i)&&(l.top-i.top)/(l.left-i.left)==(o.top-i.top)/(o.left-i.left)&&(e=function(t,e,n,o){return Math.sqrt(Math.pow(e.top-t.top,2)+Math.pow(e.left-t.left,2))/Math.sqrt(Math.pow(e.top-n.top,2)+Math.pow(e.left-n.left,2))*o.animation}(l,r,a,c.options)),y(i,o)||(n.prevFromRect=o,n.prevToRect=i,e||(e=c.options.animation),c.animate(n,l,i,e)),e&&(u=!0,d=Math.max(d,e),clearTimeout(n.animationResetTimer),n.animationResetTimer=setTimeout(function(){n.animationTime=0,n.prevFromRect=null,n.fromRect=null,n.prevToRect=null,n.thisAnimationDuration=null},e),n.thisAnimationDuration=e)}),clearTimeout(e),u?e=setTimeout(function(){"function"==typeof t&&t()},d):"function"==typeof t&&t(),o=[]},animate:function(t,e,n,o){if(o){R(t,"transition",""),R(t,"transform","");var i=v(this.el),r=i&&i.a,a=i&&i.d,l=(e.left-n.left)/(r||1),s=(e.top-n.top)/(a||1);t.animatingX=!!l,t.animatingY=!!s,R(t,"transform","translate3d("+l+"px,"+s+"px,0)"),this.forRepaintDummy=function(t){return t.offsetWidth}(t),R(t,"transition","transform "+o+"ms"+(this.options.easing?" "+this.options.easing:"")),R(t,"transform","translate3d(0,0,0)"),"number"==typeof t.animated&&clearTimeout(t.animated),t.animated=setTimeout(function(){R(t,"transition",""),R(t,"transform",""),t.animated=!1,t.animatingX=!1,t.animatingY=!1},o)}}}}var x=[],M={initializeByDefault:!0},O={mount:function(e){for(var t in M)!M.hasOwnProperty(t)||t in e||(e[t]=M[t]);x.forEach(function(t){if(t.pluginName===e.pluginName)throw"Sortable: Cannot mount plugin ".concat(e.pluginName," more than once")}),x.push(e)},pluginEvent:function(e,n,o){var t=this;this.eventCanceled=!1,o.cancel=function(){t.eventCanceled=!0};var i=e+"Global";x.forEach(function(t){n[t.pluginName]&&(n[t.pluginName][i]&&n[t.pluginName][i](I({sortable:n},o)),n.options[t.pluginName]&&n[t.pluginName][e]&&n[t.pluginName][e](I({sortable:n},o)))})},initializePlugins:function(o,i,r,t){for(var e in x.forEach(function(t){var e=t.pluginName;if(o.options[e]||t.initializeByDefault){var n=new t(o,i,o.options);n.sortable=o,n.options=o.options,o[e]=n,a(r,n.defaults)}}),o.options)if(o.options.hasOwnProperty(e)){var n=this.modifyOption(o,e,o.options[e]);void 0!==n&&(o.options[e]=n)}},getEventProperties:function(e,n){var o={};return x.forEach(function(t){"function"==typeof t.eventProperties&&a(o,t.eventProperties.call(n[t.pluginName],e))}),o},modifyOption:function(e,n,o){var i;return x.forEach(function(t){e[t.pluginName]&&t.optionListeners&&"function"==typeof t.optionListeners[n]&&(i=t.optionListeners[n].call(e[t.pluginName],o))}),i}};function N(t){var e=t.sortable,n=t.rootEl,o=t.name,i=t.targetEl,r=t.cloneEl,a=t.toEl,l=t.fromEl,s=t.oldIndex,c=t.newIndex,u=t.oldDraggableIndex,d=t.newDraggableIndex,h=t.originalEvent,f=t.putSortable,p=t.extraEventProperties;if(e=e||n&&n[j]){var g,v=e.options,m="on"+o.charAt(0).toUpperCase()+o.substr(1);!window.CustomEvent||w||E?(g=document.createEvent("Event")).initEvent(o,!0,!0):g=new CustomEvent(o,{bubbles:!0,cancelable:!0}),g.to=a||n,g.from=l||n,g.item=i||n,g.clone=r,g.oldIndex=s,g.newIndex=c,g.oldDraggableIndex=u,g.newDraggableIndex=d,g.originalEvent=h,g.pullMode=f?f.lastPutMode:void 0;var b=I({},p,O.getEventProperties(o,e));for(var y in b)g[y]=b[y];n&&n.dispatchEvent(g),v[m]&&v[m].call(e,g)}}function K(t,e,n){var o=2<arguments.length&&void 0!==n?n:{},i=o.evt,r=l(o,["evt"]);O.pluginEvent.bind(Rt)(t,e,I({dragEl:z,parentEl:G,ghostEl:U,rootEl:q,nextEl:V,lastDownEl:Z,cloneEl:Q,cloneHidden:$,dragStarted:dt,putSortable:it,activeSortable:Rt.active,originalEvent:i,oldIndex:J,oldDraggableIndex:et,newIndex:tt,newDraggableIndex:nt,hideGhostForTarget:At,unhideGhostForTarget:It,cloneNowHidden:function(){$=!0},cloneNowShown:function(){$=!1},dispatchSortableEvent:function(t){W({sortable:e,name:t,originalEvent:i})}},r))}function W(t){N(I({putSortable:it,cloneEl:Q,targetEl:z,rootEl:q,oldIndex:J,oldDraggableIndex:et,newIndex:tt,newDraggableIndex:nt},t))}var z,G,U,q,V,Z,Q,$,J,tt,et,nt,ot,it,rt,at,lt,st,ct,ut,dt,ht,ft,pt,gt,vt=!1,mt=!1,bt=[],yt=!1,wt=!1,Et=[],Dt=!1,St=[],_t="undefined"!=typeof document,Ct=n,Tt=E||w?"cssFloat":"float",xt=_t&&!i&&!n&&"draggable"in document.createElement("div"),Mt=function(){if(_t){if(w)return!1;var t=document.createElement("x");return t.style.cssText="pointer-events:auto","auto"===t.style.pointerEvents}}(),Ot=function(t,e){var n=R(t),o=parseInt(n.width)-parseInt(n.paddingLeft)-parseInt(n.paddingRight)-parseInt(n.borderLeftWidth)-parseInt(n.borderRightWidth),i=m(t,0,e),r=m(t,1,e),a=i&&R(i),l=r&&R(r),s=a&&parseInt(a.marginLeft)+parseInt(a.marginRight)+X(i).width,c=l&&parseInt(l.marginLeft)+parseInt(l.marginRight)+X(r).width;if("flex"===n.display)return"column"===n.flexDirection||"column-reverse"===n.flexDirection?"vertical":"horizontal";if("grid"===n.display)return n.gridTemplateColumns.split(" ").length<=1?"vertical":"horizontal";if(i&&a.float&&"none"!==a.float){var u="left"===a.float?"left":"right";return!r||"both"!==l.clear&&l.clear!==u?"horizontal":"vertical"}return i&&("block"===a.display||"flex"===a.display||"table"===a.display||"grid"===a.display||o<=s&&"none"===n[Tt]||r&&"none"===n[Tt]&&o<s+c)?"vertical":"horizontal"},Nt=function(t){function s(a,l){return function(t,e,n,o){var i=t.options.group.name&&e.options.group.name&&t.options.group.name===e.options.group.name;if(null==a&&(l||i))return!0;if(null==a||!1===a)return!1;if(l&&"clone"===a)return a;if("function"==typeof a)return s(a(t,e,n,o),l)(t,e,n,o);var r=(l?t:e).options.group.name;return!0===a||"string"==typeof a&&a===r||a.join&&-1<a.indexOf(r)}}var e={},n=t.group;n&&"object"==o(n)||(n={name:n}),e.name=n.name,e.checkPull=s(n.pull,!0),e.checkPut=s(n.put),e.revertClone=n.revertClone,t.group=e},At=function(){!Mt&&U&&R(U,"display","none")},It=function(){!Mt&&U&&R(U,"display","")};_t&&document.addEventListener("click",function(t){if(mt)return t.preventDefault(),t.stopPropagation&&t.stopPropagation(),t.stopImmediatePropagation&&t.stopImmediatePropagation(),mt=!1},!0);function Pt(t){if(z){var e=function(r,a){var l;return bt.some(function(t){if(!B(t)){var e=X(t),n=t[j].options.emptyInsertThreshold,o=r>=e.left-n&&r<=e.right+n,i=a>=e.top-n&&a<=e.bottom+n;return n&&o&&i?l=t:void 0}}),l}((t=t.touches?t.touches[0]:t).clientX,t.clientY);if(e){var n={};for(var o in t)t.hasOwnProperty(o)&&(n[o]=t[o]);n.target=n.rootEl=e,n.preventDefault=void 0,n.stopPropagation=void 0,e[j]._onDragOver(n)}}}function kt(t){z&&z.parentNode[j]._isOutsideThisEl(t.target)}function Rt(t,e){if(!t||!t.nodeType||1!==t.nodeType)throw"Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(t));this.el=t,this.options=e=a({},e),t[j]=this;var n={group:null,sort:!0,disabled:!1,store:null,handle:null,draggable:/^[uo]l$/i.test(t.nodeName)?">li":">*",swapThreshold:1,invertSwap:!1,invertedSwapThreshold:null,removeCloneOnHide:!0,direction:function(){return Ot(t,this.options)},ghostClass:"sortable-ghost",chosenClass:"sortable-chosen",dragClass:"sortable-drag",ignore:"a, img",filter:null,preventOnFilter:!0,animation:0,easing:null,setData:function(t,e){t.setData("Text",e.textContent)},dropBubble:!1,dragoverBubble:!1,dataIdAttr:"data-id",delay:0,delayOnTouchOnly:!1,touchStartThreshold:(Number.parseInt?Number:window).parseInt(window.devicePixelRatio,10)||1,forceFallback:!1,fallbackClass:"sortable-fallback",fallbackOnBody:!1,fallbackTolerance:0,fallbackOffset:{x:0,y:0},supportPointer:!1!==Rt.supportPointer&&"PointerEvent"in window&&!u,emptyInsertThreshold:5};for(var o in O.initializePlugins(this,t,n),n)o in e||(e[o]=n[o]);for(var i in Nt(e),this)"_"===i.charAt(0)&&"function"==typeof this[i]&&(this[i]=this[i].bind(this));this.nativeDraggable=!e.forceFallback&&xt,this.nativeDraggable&&(this.options.touchStartThreshold=1),e.supportPointer?d(t,"pointerdown",this._onTapStart):(d(t,"mousedown",this._onTapStart),d(t,"touchstart",this._onTapStart)),this.nativeDraggable&&(d(t,"dragover",this),d(t,"dragenter",this)),bt.push(this.el),e.store&&e.store.get&&this.sort(e.store.get(this)||[]),a(this,T())}function Xt(t,e,n,o,i,r,a,l){var s,c,u=t[j],d=u.options.onMove;return!window.CustomEvent||w||E?(s=document.createEvent("Event")).initEvent("move",!0,!0):s=new CustomEvent("move",{bubbles:!0,cancelable:!0}),s.to=e,s.from=t,s.dragged=n,s.draggedRect=o,s.related=i||e,s.relatedRect=r||X(e),s.willInsertAfter=l,s.originalEvent=a,t.dispatchEvent(s),d&&(c=d.call(u,s,a)),c}function Yt(t){t.draggable=!1}function Bt(){Dt=!1}function Ft(t){for(var e=t.tagName+t.className+t.src+t.href+t.textContent,n=e.length,o=0;n--;)o+=e.charCodeAt(n);return o.toString(36)}function Ht(t){return setTimeout(t,0)}function Lt(t){return clearTimeout(t)}Rt.prototype={constructor:Rt,_isOutsideThisEl:function(t){this.el.contains(t)||t===this.el||(ht=null)},_getDirection:function(t,e){return"function"==typeof this.options.direction?this.options.direction.call(this,t,e,z):this.options.direction},_onTapStart:function(e){if(e.cancelable){var n=this,o=this.el,t=this.options,i=t.preventOnFilter,r=e.type,a=e.touches&&e.touches[0]||e.pointerType&&"touch"===e.pointerType&&e,l=(a||e).target,s=e.target.shadowRoot&&(e.path&&e.path[0]||e.composedPath&&e.composedPath()[0])||l,c=t.filter;if(function(t){St.length=0;var e=t.getElementsByTagName("input"),n=e.length;for(;n--;){var o=e[n];o.checked&&St.push(o)}}(o),!z&&!(/mousedown|pointerdown/.test(r)&&0!==e.button||t.disabled)&&!s.isContentEditable&&(this.nativeDraggable||!u||!l||"SELECT"!==l.tagName.toUpperCase())&&!((l=P(l,t.draggable,o,!1))&&l.animated||Z===l)){if(J=F(l),et=F(l,t.draggable),"function"==typeof c){if(c.call(this,e,l,this))return W({sortable:n,rootEl:s,name:"filter",targetEl:l,toEl:o,fromEl:o}),K("filter",n,{evt:e}),void(i&&e.cancelable&&e.preventDefault())}else if(c&&(c=c.split(",").some(function(t){if(t=P(s,t.trim(),o,!1))return W({sortable:n,rootEl:t,name:"filter",targetEl:l,fromEl:o,toEl:o}),K("filter",n,{evt:e}),!0})))return void(i&&e.cancelable&&e.preventDefault());t.handle&&!P(s,t.handle,o,!1)||this._prepareDragStart(e,a,l)}}},_prepareDragStart:function(t,e,n){var o,i=this,r=i.el,a=i.options,l=r.ownerDocument;if(n&&!z&&n.parentNode===r){var s=X(n);if(q=r,G=(z=n).parentNode,V=z.nextSibling,Z=n,ot=a.group,rt={target:Rt.dragged=z,clientX:(e||t).clientX,clientY:(e||t).clientY},ct=rt.clientX-s.left,ut=rt.clientY-s.top,this._lastX=(e||t).clientX,this._lastY=(e||t).clientY,z.style["will-change"]="all",o=function(){K("delayEnded",i,{evt:t}),Rt.eventCanceled?i._onDrop():(i._disableDelayedDragEvents(),!c&&i.nativeDraggable&&(z.draggable=!0),i._triggerDragStart(t,e),W({sortable:i,name:"choose",originalEvent:t}),k(z,a.chosenClass,!0))},a.ignore.split(",").forEach(function(t){g(z,t.trim(),Yt)}),d(l,"dragover",Pt),d(l,"mousemove",Pt),d(l,"touchmove",Pt),d(l,"mouseup",i._onDrop),d(l,"touchend",i._onDrop),d(l,"touchcancel",i._onDrop),c&&this.nativeDraggable&&(this.options.touchStartThreshold=4,z.draggable=!0),K("delayStart",this,{evt:t}),!a.delay||a.delayOnTouchOnly&&!e||this.nativeDraggable&&(E||w))o();else{if(Rt.eventCanceled)return void this._onDrop();d(l,"mouseup",i._disableDelayedDrag),d(l,"touchend",i._disableDelayedDrag),d(l,"touchcancel",i._disableDelayedDrag),d(l,"mousemove",i._delayedDragTouchMoveHandler),d(l,"touchmove",i._delayedDragTouchMoveHandler),a.supportPointer&&d(l,"pointermove",i._delayedDragTouchMoveHandler),i._dragStartTimer=setTimeout(o,a.delay)}}},_delayedDragTouchMoveHandler:function(t){var e=t.touches?t.touches[0]:t;Math.max(Math.abs(e.clientX-this._lastX),Math.abs(e.clientY-this._lastY))>=Math.floor(this.options.touchStartThreshold/(this.nativeDraggable&&window.devicePixelRatio||1))&&this._disableDelayedDrag()},_disableDelayedDrag:function(){z&&Yt(z),clearTimeout(this._dragStartTimer),this._disableDelayedDragEvents()},_disableDelayedDragEvents:function(){var t=this.el.ownerDocument;s(t,"mouseup",this._disableDelayedDrag),s(t,"touchend",this._disableDelayedDrag),s(t,"touchcancel",this._disableDelayedDrag),s(t,"mousemove",this._delayedDragTouchMoveHandler),s(t,"touchmove",this._delayedDragTouchMoveHandler),s(t,"pointermove",this._delayedDragTouchMoveHandler)},_triggerDragStart:function(t,e){e=e||"touch"==t.pointerType&&t,!this.nativeDraggable||e?this.options.supportPointer?d(document,"pointermove",this._onTouchMove):d(document,e?"touchmove":"mousemove",this._onTouchMove):(d(z,"dragend",this),d(q,"dragstart",this._onDragStart));try{document.selection?Ht(function(){document.selection.empty()}):window.getSelection().removeAllRanges()}catch(t){}},_dragStarted:function(t,e){if(vt=!1,q&&z){K("dragStarted",this,{evt:e}),this.nativeDraggable&&d(document,"dragover",kt);var n=this.options;t||k(z,n.dragClass,!1),k(z,n.ghostClass,!0),Rt.active=this,t&&this._appendGhost(),W({sortable:this,name:"start",originalEvent:e})}else this._nulling()},_emulateDragOver:function(){if(at){this._lastX=at.clientX,this._lastY=at.clientY,At();for(var t=document.elementFromPoint(at.clientX,at.clientY),e=t;t&&t.shadowRoot&&(t=t.shadowRoot.elementFromPoint(at.clientX,at.clientY))!==e;)e=t;if(z.parentNode[j]._isOutsideThisEl(t),e)do{if(e[j]){if(e[j]._onDragOver({clientX:at.clientX,clientY:at.clientY,target:t,rootEl:e})&&!this.options.dragoverBubble)break}t=e}while(e=e.parentNode);It()}},_onTouchMove:function(t){if(rt){var e=this.options,n=e.fallbackTolerance,o=e.fallbackOffset,i=t.touches?t.touches[0]:t,r=U&&v(U,!0),a=U&&r&&r.a,l=U&&r&&r.d,s=Ct&&gt&&b(gt),c=(i.clientX-rt.clientX+o.x)/(a||1)+(s?s[0]-Et[0]:0)/(a||1),u=(i.clientY-rt.clientY+o.y)/(l||1)+(s?s[1]-Et[1]:0)/(l||1);if(!Rt.active&&!vt){if(n&&Math.max(Math.abs(i.clientX-this._lastX),Math.abs(i.clientY-this._lastY))<n)return;this._onDragStart(t,!0)}if(U){r?(r.e+=c-(lt||0),r.f+=u-(st||0)):r={a:1,b:0,c:0,d:1,e:c,f:u};var d="matrix(".concat(r.a,",").concat(r.b,",").concat(r.c,",").concat(r.d,",").concat(r.e,",").concat(r.f,")");R(U,"webkitTransform",d),R(U,"mozTransform",d),R(U,"msTransform",d),R(U,"transform",d),lt=c,st=u,at=i}t.cancelable&&t.preventDefault()}},_appendGhost:function(){if(!U){var t=this.options.fallbackOnBody?document.body:q,e=X(z,!0,Ct,!0,t),n=this.options;if(Ct){for(gt=t;"static"===R(gt,"position")&&"none"===R(gt,"transform")&&gt!==document;)gt=gt.parentNode;gt!==document.body&&gt!==document.documentElement?(gt===document&&(gt=A()),e.top+=gt.scrollTop,e.left+=gt.scrollLeft):gt=A(),Et=b(gt)}k(U=z.cloneNode(!0),n.ghostClass,!1),k(U,n.fallbackClass,!0),k(U,n.dragClass,!0),R(U,"transition",""),R(U,"transform",""),R(U,"box-sizing","border-box"),R(U,"margin",0),R(U,"top",e.top),R(U,"left",e.left),R(U,"width",e.width),R(U,"height",e.height),R(U,"opacity","0.8"),R(U,"position",Ct?"absolute":"fixed"),R(U,"zIndex","100000"),R(U,"pointerEvents","none"),Rt.ghost=U,t.appendChild(U),R(U,"transform-origin",ct/parseInt(U.style.width)*100+"% "+ut/parseInt(U.style.height)*100+"%")}},_onDragStart:function(t,e){var n=this,o=t.dataTransfer,i=n.options;K("dragStart",this,{evt:t}),Rt.eventCanceled?this._onDrop():(K("setupClone",this),Rt.eventCanceled||((Q=S(z)).draggable=!1,Q.style["will-change"]="",this._hideClone(),k(Q,this.options.chosenClass,!1),Rt.clone=Q),n.cloneId=Ht(function(){K("clone",n),Rt.eventCanceled||(n.options.removeCloneOnHide||q.insertBefore(Q,z),n._hideClone(),W({sortable:n,name:"clone"}))}),e||k(z,i.dragClass,!0),e?(mt=!0,n._loopId=setInterval(n._emulateDragOver,50)):(s(document,"mouseup",n._onDrop),s(document,"touchend",n._onDrop),s(document,"touchcancel",n._onDrop),o&&(o.effectAllowed="move",i.setData&&i.setData.call(n,o,z)),d(document,"drop",n),R(z,"transform","translateZ(0)")),vt=!0,n._dragStartId=Ht(n._dragStarted.bind(n,e,t)),d(document,"selectstart",n),dt=!0,u&&R(document.body,"user-select","none"))},_onDragOver:function(n){var o,i,r,a,l=this.el,s=n.target,e=this.options,t=e.group,c=Rt.active,u=ot===t,d=e.sort,h=it||c,f=this,p=!1;if(!Dt){if(void 0!==n.preventDefault&&n.cancelable&&n.preventDefault(),s=P(s,e.draggable,l,!0),M("dragOver"),Rt.eventCanceled)return p;if(z.contains(n.target)||s.animated&&s.animatingX&&s.animatingY||f._ignoreWhileAnimating===s)return N(!1);if(mt=!1,c&&!e.disabled&&(u?d||(r=!q.contains(z)):it===this||(this.lastPutMode=ot.checkPull(this,c,z,n))&&t.checkPut(this,c,z,n))){if(a="vertical"===this._getDirection(n,s),o=X(z),M("dragOverValid"),Rt.eventCanceled)return p;if(r)return G=q,O(),this._hideClone(),M("revert"),Rt.eventCanceled||(V?q.insertBefore(z,V):q.appendChild(z)),N(!0);var g=B(l,e.draggable);if(!g||function(t,e,n){var o=X(B(n.el,n.options.draggable));return e?t.clientX>o.right+10||t.clientX<=o.right&&t.clientY>o.bottom&&t.clientX>=o.left:t.clientX>o.right&&t.clientY>o.top||t.clientX<=o.right&&t.clientY>o.bottom+10}(n,a,this)&&!g.animated){if(g===z)return N(!1);if(g&&l===n.target&&(s=g),s&&(i=X(s)),!1!==Xt(q,l,z,o,s,i,n,!!s))return O(),l.appendChild(z),G=l,A(),N(!0)}else if(s.parentNode===l){i=X(s);var v,m,b,y=z.parentNode!==l,w=!function(t,e,n){var o=n?t.left:t.top,i=n?t.right:t.bottom,r=n?t.width:t.height,a=n?e.left:e.top,l=n?e.right:e.bottom,s=n?e.width:e.height;return o===a||i===l||o+r/2===a+s/2}(z.animated&&z.toRect||o,s.animated&&s.toRect||i,a),E=a?"top":"left",D=Y(s,"top","top")||Y(z,"top","top"),S=D?D.scrollTop:void 0;if(ht!==s&&(m=i[E],yt=!1,wt=!w&&e.invertSwap||y),0!==(v=function(t,e,n,o,i,r,a,l){var s=o?t.clientY:t.clientX,c=o?n.height:n.width,u=o?n.top:n.left,d=o?n.bottom:n.right,h=!1;if(!a)if(l&&pt<c*i){if(!yt&&(1===ft?u+c*r/2<s:s<d-c*r/2)&&(yt=!0),yt)h=!0;else if(1===ft?s<u+pt:d-pt<s)return-ft}else if(u+c*(1-i)/2<s&&s<d-c*(1-i)/2)return function(t){return F(z)<F(t)?1:-1}(e);if((h=h||a)&&(s<u+c*r/2||d-c*r/2<s))return u+c/2<s?1:-1;return 0}(n,s,i,a,w?1:e.swapThreshold,null==e.invertedSwapThreshold?e.swapThreshold:e.invertedSwapThreshold,wt,ht===s)))for(var _=F(z);_-=v,(b=G.children[_])&&("none"===R(b,"display")||b===U););if(0===v||b===s)return N(!1);ft=v;var C=(ht=s).nextElementSibling,T=!1,x=Xt(q,l,z,o,s,i,n,T=1===v);if(!1!==x)return 1!==x&&-1!==x||(T=1===x),Dt=!0,setTimeout(Bt,30),O(),T&&!C?l.appendChild(z):s.parentNode.insertBefore(z,T?C:s),D&&L(D,0,S-D.scrollTop),G=z.parentNode,void 0===m||wt||(pt=Math.abs(m-X(s)[E])),A(),N(!0)}if(l.contains(z))return N(!1)}return!1}function M(t,e){K(t,f,I({evt:n,isOwner:u,axis:a?"vertical":"horizontal",revert:r,dragRect:o,targetRect:i,canSort:d,fromSortable:h,target:s,completed:N,onMove:function(t,e){return Xt(q,l,z,o,t,X(t),n,e)},changed:A},e))}function O(){M("dragOverAnimationCapture"),f.captureAnimationState(),f!==h&&h.captureAnimationState()}function N(t){return M("dragOverCompleted",{insertion:t}),t&&(u?c._hideClone():c._showClone(f),f!==h&&(k(z,it?it.options.ghostClass:c.options.ghostClass,!1),k(z,e.ghostClass,!0)),it!==f&&f!==Rt.active?it=f:f===Rt.active&&it&&(it=null),h===f&&(f._ignoreWhileAnimating=s),f.animateAll(function(){M("dragOverAnimationComplete"),f._ignoreWhileAnimating=null}),f!==h&&(h.animateAll(),h._ignoreWhileAnimating=null)),(s===z&&!z.animated||s===l&&!s.animated)&&(ht=null),e.dragoverBubble||n.rootEl||s===document||(z.parentNode[j]._isOutsideThisEl(n.target),t||Pt(n)),!e.dragoverBubble&&n.stopPropagation&&n.stopPropagation(),p=!0}function A(){tt=F(z),nt=F(z,e.draggable),W({sortable:f,name:"change",toEl:l,newIndex:tt,newDraggableIndex:nt,originalEvent:n})}},_ignoreWhileAnimating:null,_offMoveEvents:function(){s(document,"mousemove",this._onTouchMove),s(document,"touchmove",this._onTouchMove),s(document,"pointermove",this._onTouchMove),s(document,"dragover",Pt),s(document,"mousemove",Pt),s(document,"touchmove",Pt)},_offUpEvents:function(){var t=this.el.ownerDocument;s(t,"mouseup",this._onDrop),s(t,"touchend",this._onDrop),s(t,"pointerup",this._onDrop),s(t,"touchcancel",this._onDrop),s(document,"selectstart",this)},_onDrop:function(t){var e=this.el,n=this.options;tt=F(z),nt=F(z,n.draggable),K("drop",this,{evt:t}),G=z&&z.parentNode,tt=F(z),nt=F(z,n.draggable),Rt.eventCanceled||(yt=wt=vt=!1,clearInterval(this._loopId),clearTimeout(this._dragStartTimer),Lt(this.cloneId),Lt(this._dragStartId),this.nativeDraggable&&(s(document,"drop",this),s(e,"dragstart",this._onDragStart)),this._offMoveEvents(),this._offUpEvents(),u&&R(document.body,"user-select",""),R(z,"transform",""),t&&(dt&&(t.cancelable&&t.preventDefault(),n.dropBubble||t.stopPropagation()),U&&U.parentNode&&U.parentNode.removeChild(U),(q===G||it&&"clone"!==it.lastPutMode)&&Q&&Q.parentNode&&Q.parentNode.removeChild(Q),z&&(this.nativeDraggable&&s(z,"dragend",this),Yt(z),z.style["will-change"]="",dt&&!vt&&k(z,it?it.options.ghostClass:this.options.ghostClass,!1),k(z,this.options.chosenClass,!1),W({sortable:this,name:"unchoose",toEl:G,newIndex:null,newDraggableIndex:null,originalEvent:t}),q!==G?(0<=tt&&(W({rootEl:G,name:"add",toEl:G,fromEl:q,originalEvent:t}),W({sortable:this,name:"remove",toEl:G,originalEvent:t}),W({rootEl:G,name:"sort",toEl:G,fromEl:q,originalEvent:t}),W({sortable:this,name:"sort",toEl:G,originalEvent:t})),it&&it.save()):tt!==J&&0<=tt&&(W({sortable:this,name:"update",toEl:G,originalEvent:t}),W({sortable:this,name:"sort",toEl:G,originalEvent:t})),Rt.active&&(null!=tt&&-1!==tt||(tt=J,nt=et),W({sortable:this,name:"end",toEl:G,originalEvent:t}),this.save())))),this._nulling()},_nulling:function(){K("nulling",this),q=z=G=U=V=Q=Z=$=rt=at=dt=tt=nt=J=et=ht=ft=it=ot=Rt.dragged=Rt.ghost=Rt.clone=Rt.active=null,St.forEach(function(t){t.checked=!0}),St.length=lt=st=0},handleEvent:function(t){switch(t.type){case"drop":case"dragend":this._onDrop(t);break;case"dragenter":case"dragover":z&&(this._onDragOver(t),function(t){t.dataTransfer&&(t.dataTransfer.dropEffect="move");t.cancelable&&t.preventDefault()}(t));break;case"selectstart":t.preventDefault()}},toArray:function(){for(var t,e=[],n=this.el.children,o=0,i=n.length,r=this.options;o<i;o++)P(t=n[o],r.draggable,this.el,!1)&&e.push(t.getAttribute(r.dataIdAttr)||Ft(t));return e},sort:function(t,e){var o={},i=this.el;this.toArray().forEach(function(t,e){var n=i.children[e];P(n,this.options.draggable,i,!1)&&(o[t]=n)},this),e&&this.captureAnimationState(),t.forEach(function(t){o[t]&&(i.removeChild(o[t]),i.appendChild(o[t]))}),e&&this.animateAll()},save:function(){var t=this.options.store;t&&t.set&&t.set(this)},closest:function(t,e){return P(t,e||this.options.draggable,this.el,!1)},option:function(t,e){var n=this.options;if(void 0===e)return n[t];var o=O.modifyOption(this,t,e);n[t]=void 0!==o?o:e,"group"===t&&Nt(n)},destroy:function(){K("destroy",this);var t=this.el;t[j]=null,s(t,"mousedown",this._onTapStart),s(t,"touchstart",this._onTapStart),s(t,"pointerdown",this._onTapStart),this.nativeDraggable&&(s(t,"dragover",this),s(t,"dragenter",this)),Array.prototype.forEach.call(t.querySelectorAll("[draggable]"),function(t){t.removeAttribute("draggable")}),this._onDrop(),this._disableDelayedDragEvents(),bt.splice(bt.indexOf(this.el),1),this.el=t=null},_hideClone:function(){if(!$){if(K("hideClone",this),Rt.eventCanceled)return;R(Q,"display","none"),this.options.removeCloneOnHide&&Q.parentNode&&Q.parentNode.removeChild(Q),$=!0}},_showClone:function(t){if("clone"===t.lastPutMode){if($){if(K("showClone",this),Rt.eventCanceled)return;z.parentNode!=q||this.options.group.revertClone?V?q.insertBefore(Q,V):q.appendChild(Q):q.insertBefore(Q,z),this.options.group.revertClone&&this.animate(z,Q),R(Q,"display",""),$=!1}}else this._hideClone()}},_t&&d(document,"touchmove",function(t){(Rt.active||vt)&&t.cancelable&&t.preventDefault()}),Rt.utils={on:d,off:s,css:R,find:g,is:function(t,e){return!!P(t,e,t,!1)},extend:function(t,e){if(t&&e)for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t},throttle:D,closest:P,toggleClass:k,clone:S,index:F,nextTick:Ht,cancelNextTick:Lt,detectDirection:Ot,getChild:m},Rt.get=function(t){return t[j]},Rt.mount=function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];e[0].constructor===Array&&(e=e[0]),e.forEach(function(t){if(!t.prototype||!t.prototype.constructor)throw"Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(t));t.utils&&(Rt.utils=I({},Rt.utils,t.utils)),O.mount(t)})},Rt.create=function(t,e){return new Rt(t,e)};var jt,Kt,Wt,zt,Gt,Ut,qt=[],Vt=!(Rt.version="1.13.0");function Zt(){qt.forEach(function(t){clearInterval(t.pid)}),qt=[]}function Qt(){clearInterval(Ut)}function $t(t){var e=t.originalEvent,n=t.putSortable,o=t.dragEl,i=t.activeSortable,r=t.dispatchSortableEvent,a=t.hideGhostForTarget,l=t.unhideGhostForTarget;if(e){var s=n||i;a();var c=e.changedTouches&&e.changedTouches.length?e.changedTouches[0]:e,u=document.elementFromPoint(c.clientX,c.clientY);l(),s&&!s.el.contains(u)&&(r("spill"),this.onSpill({dragEl:o,putSortable:n}))}}var Jt,te=D(function(n,t,e,o){if(t.scroll){var i,r=(n.touches?n.touches[0]:n).clientX,a=(n.touches?n.touches[0]:n).clientY,l=t.scrollSensitivity,s=t.scrollSpeed,c=A(),u=!1;Kt!==e&&(Kt=e,Zt(),jt=t.scroll,i=t.scrollFn,!0===jt&&(jt=H(e,!0)));var d=0,h=jt;do{var f=h,p=X(f),g=p.top,v=p.bottom,m=p.left,b=p.right,y=p.width,w=p.height,E=void 0,D=void 0,S=f.scrollWidth,_=f.scrollHeight,C=R(f),T=f.scrollLeft,x=f.scrollTop;D=f===c?(E=y<S&&("auto"===C.overflowX||"scroll"===C.overflowX||"visible"===C.overflowX),w<_&&("auto"===C.overflowY||"scroll"===C.overflowY||"visible"===C.overflowY)):(E=y<S&&("auto"===C.overflowX||"scroll"===C.overflowX),w<_&&("auto"===C.overflowY||"scroll"===C.overflowY));var M=E&&(Math.abs(b-r)<=l&&T+y<S)-(Math.abs(m-r)<=l&&!!T),O=D&&(Math.abs(v-a)<=l&&x+w<_)-(Math.abs(g-a)<=l&&!!x);if(!qt[d])for(var N=0;N<=d;N++)qt[N]||(qt[N]={});qt[d].vx==M&&qt[d].vy==O&&qt[d].el===f||(qt[d].el=f,qt[d].vx=M,qt[d].vy=O,clearInterval(qt[d].pid),0==M&&0==O||(u=!0,qt[d].pid=setInterval(function(){o&&0===this.layer&&Rt.active._onTouchMove(Gt);var t=qt[this.layer].vy?qt[this.layer].vy*s:0,e=qt[this.layer].vx?qt[this.layer].vx*s:0;"function"==typeof i&&"continue"!==i.call(Rt.dragged.parentNode[j],e,t,n,Gt,qt[this.layer].el)||L(qt[this.layer].el,e,t)}.bind({layer:d}),24))),d++}while(t.bubbleScroll&&h!==c&&(h=H(h,!1)));Vt=u}},30);function ee(){}function ne(){}ee.prototype={startIndex:null,dragStart:function(t){var e=t.oldDraggableIndex;this.startIndex=e},onSpill:function(t){var e=t.dragEl,n=t.putSortable;this.sortable.captureAnimationState(),n&&n.captureAnimationState();var o=m(this.sortable.el,this.startIndex,this.options);o?this.sortable.el.insertBefore(e,o):this.sortable.el.appendChild(e),this.sortable.animateAll(),n&&n.animateAll()},drop:$t},a(ee,{pluginName:"revertOnSpill"}),ne.prototype={onSpill:function(t){var e=t.dragEl,n=t.putSortable||this.sortable;n.captureAnimationState(),e.parentNode&&e.parentNode.removeChild(e),n.animateAll()},drop:$t},a(ne,{pluginName:"removeOnSpill"});var oe,ie,re,ae,le,se=[],ce=[],ue=!1,de=!1,he=!1;function fe(o,i){ce.forEach(function(t,e){var n=i.children[t.sortableIndex+(o?Number(e):0)];n?i.insertBefore(t,n):i.appendChild(t)})}function pe(){se.forEach(function(t){t!==re&&t.parentNode&&t.parentNode.removeChild(t)})}return Rt.mount(new function(){function t(){for(var t in this.defaults={scroll:!0,scrollSensitivity:30,scrollSpeed:10,bubbleScroll:!0},this)"_"===t.charAt(0)&&"function"==typeof this[t]&&(this[t]=this[t].bind(this))}return t.prototype={dragStarted:function(t){var e=t.originalEvent;this.sortable.nativeDraggable?d(document,"dragover",this._handleAutoScroll):this.options.supportPointer?d(document,"pointermove",this._handleFallbackAutoScroll):e.touches?d(document,"touchmove",this._handleFallbackAutoScroll):d(document,"mousemove",this._handleFallbackAutoScroll)},dragOverCompleted:function(t){var e=t.originalEvent;this.options.dragOverBubble||e.rootEl||this._handleAutoScroll(e)},drop:function(){this.sortable.nativeDraggable?s(document,"dragover",this._handleAutoScroll):(s(document,"pointermove",this._handleFallbackAutoScroll),s(document,"touchmove",this._handleFallbackAutoScroll),s(document,"mousemove",this._handleFallbackAutoScroll)),Qt(),Zt(),clearTimeout(f),f=void 0},nulling:function(){Gt=Kt=jt=Vt=Ut=Wt=zt=null,qt.length=0},_handleFallbackAutoScroll:function(t){this._handleAutoScroll(t,!0)},_handleAutoScroll:function(e,n){var o=this,i=(e.touches?e.touches[0]:e).clientX,r=(e.touches?e.touches[0]:e).clientY,t=document.elementFromPoint(i,r);if(Gt=e,n||E||w||u){te(e,this.options,t,n);var a=H(t,!0);!Vt||Ut&&i===Wt&&r===zt||(Ut&&Qt(),Ut=setInterval(function(){var t=H(document.elementFromPoint(i,r),!0);t!==a&&(a=t,Zt()),te(e,o.options,t,n)},10),Wt=i,zt=r)}else{if(!this.options.bubbleScroll||H(t,!0)===A())return void Zt();te(e,this.options,H(t,!1),!1)}}},a(t,{pluginName:"scroll",initializeByDefault:!0})}),Rt.mount(ne,ee),Rt.mount(new function(){function t(){this.defaults={swapClass:"sortable-swap-highlight"}}return t.prototype={dragStart:function(t){var e=t.dragEl;Jt=e},dragOverValid:function(t){var e=t.completed,n=t.target,o=t.onMove,i=t.activeSortable,r=t.changed,a=t.cancel;if(i.options.swap){var l=this.sortable.el,s=this.options;if(n&&n!==l){var c=Jt;Jt=!1!==o(n)?(k(n,s.swapClass,!0),n):null,c&&c!==Jt&&k(c,s.swapClass,!1)}r(),e(!0),a()}},drop:function(t){var e=t.activeSortable,n=t.putSortable,o=t.dragEl,i=n||this.sortable,r=this.options;Jt&&k(Jt,r.swapClass,!1),Jt&&(r.swap||n&&n.options.swap)&&o!==Jt&&(i.captureAnimationState(),i!==e&&e.captureAnimationState(),function(t,e){var n,o,i=t.parentNode,r=e.parentNode;if(!i||!r||i.isEqualNode(e)||r.isEqualNode(t))return;n=F(t),o=F(e),i.isEqualNode(r)&&n<o&&o++;i.insertBefore(e,i.children[n]),r.insertBefore(t,r.children[o])}(o,Jt),i.animateAll(),i!==e&&e.animateAll())},nulling:function(){Jt=null}},a(t,{pluginName:"swap",eventProperties:function(){return{swapItem:Jt}}})}),Rt.mount(new function(){function t(o){for(var t in this)"_"===t.charAt(0)&&"function"==typeof this[t]&&(this[t]=this[t].bind(this));o.options.supportPointer?d(document,"pointerup",this._deselectMultiDrag):(d(document,"mouseup",this._deselectMultiDrag),d(document,"touchend",this._deselectMultiDrag)),d(document,"keydown",this._checkKeyDown),d(document,"keyup",this._checkKeyUp),this.defaults={selectedClass:"sortable-selected",multiDragKey:null,setData:function(t,e){var n="";se.length&&ie===o?se.forEach(function(t,e){n+=(e?", ":"")+t.textContent}):n=e.textContent,t.setData("Text",n)}}}return t.prototype={multiDragKeyDown:!1,isMultiDrag:!1,delayStartGlobal:function(t){var e=t.dragEl;re=e},delayEnded:function(){this.isMultiDrag=~se.indexOf(re)},setupClone:function(t){var e=t.sortable,n=t.cancel;if(this.isMultiDrag){for(var o=0;o<se.length;o++)ce.push(S(se[o])),ce[o].sortableIndex=se[o].sortableIndex,ce[o].draggable=!1,ce[o].style["will-change"]="",k(ce[o],this.options.selectedClass,!1),se[o]===re&&k(ce[o],this.options.chosenClass,!1);e._hideClone(),n()}},clone:function(t){var e=t.sortable,n=t.rootEl,o=t.dispatchSortableEvent,i=t.cancel;this.isMultiDrag&&(this.options.removeCloneOnHide||se.length&&ie===e&&(fe(!0,n),o("clone"),i()))},showClone:function(t){var e=t.cloneNowShown,n=t.rootEl,o=t.cancel;this.isMultiDrag&&(fe(!1,n),ce.forEach(function(t){R(t,"display","")}),e(),le=!1,o())},hideClone:function(t){var e=this,n=(t.sortable,t.cloneNowHidden),o=t.cancel;this.isMultiDrag&&(ce.forEach(function(t){R(t,"display","none"),e.options.removeCloneOnHide&&t.parentNode&&t.parentNode.removeChild(t)}),n(),le=!0,o())},dragStartGlobal:function(t){t.sortable;!this.isMultiDrag&&ie&&ie.multiDrag._deselectMultiDrag(),se.forEach(function(t){t.sortableIndex=F(t)}),se=se.sort(function(t,e){return t.sortableIndex-e.sortableIndex}),he=!0},dragStarted:function(t){var e=this,n=t.sortable;if(this.isMultiDrag){if(this.options.sort&&(n.captureAnimationState(),this.options.animation)){se.forEach(function(t){t!==re&&R(t,"position","absolute")});var o=X(re,!1,!0,!0);se.forEach(function(t){t!==re&&_(t,o)}),ue=de=!0}n.animateAll(function(){ue=de=!1,e.options.animation&&se.forEach(function(t){C(t)}),e.options.sort&&pe()})}},dragOver:function(t){var e=t.target,n=t.completed,o=t.cancel;de&&~se.indexOf(e)&&(n(!1),o())},revert:function(t){var e=t.fromSortable,n=t.rootEl,o=t.sortable,i=t.dragRect;1<se.length&&(se.forEach(function(t){o.addAnimationState({target:t,rect:de?X(t):i}),C(t),t.fromRect=i,e.removeAnimationState(t)}),de=!1,function(o,i){se.forEach(function(t,e){var n=i.children[t.sortableIndex+(o?Number(e):0)];n?i.insertBefore(t,n):i.appendChild(t)})}(!this.options.removeCloneOnHide,n))},dragOverCompleted:function(t){var e=t.sortable,n=t.isOwner,o=t.insertion,i=t.activeSortable,r=t.parentEl,a=t.putSortable,l=this.options;if(o){if(n&&i._hideClone(),ue=!1,l.animation&&1<se.length&&(de||!n&&!i.options.sort&&!a)){var s=X(re,!1,!0,!0);se.forEach(function(t){t!==re&&(_(t,s),r.appendChild(t))}),de=!0}if(!n)if(de||pe(),1<se.length){var c=le;i._showClone(e),i.options.animation&&!le&&c&&ce.forEach(function(t){i.addAnimationState({target:t,rect:ae}),t.fromRect=ae,t.thisAnimationDuration=null})}else i._showClone(e)}},dragOverAnimationCapture:function(t){var e=t.dragRect,n=t.isOwner,o=t.activeSortable;if(se.forEach(function(t){t.thisAnimationDuration=null}),o.options.animation&&!n&&o.multiDrag.isMultiDrag){ae=a({},e);var i=v(re,!0);ae.top-=i.f,ae.left-=i.e}},dragOverAnimationComplete:function(){de&&(de=!1,pe())},drop:function(t){var e=t.originalEvent,n=t.rootEl,o=t.parentEl,i=t.sortable,r=t.dispatchSortableEvent,a=t.oldIndex,l=t.putSortable,s=l||this.sortable;if(e){var c=this.options,u=o.children;if(!he)if(c.multiDragKey&&!this.multiDragKeyDown&&this._deselectMultiDrag(),k(re,c.selectedClass,!~se.indexOf(re)),~se.indexOf(re))se.splice(se.indexOf(re),1),oe=null,N({sortable:i,rootEl:n,name:"deselect",targetEl:re,originalEvt:e});else{if(se.push(re),N({sortable:i,rootEl:n,name:"select",targetEl:re,originalEvt:e}),e.shiftKey&&oe&&i.el.contains(oe)){var d,h,f=F(oe),p=F(re);if(~f&&~p&&f!==p)for(d=f<p?(h=f,p):(h=p,f+1);h<d;h++)~se.indexOf(u[h])||(k(u[h],c.selectedClass,!0),se.push(u[h]),N({sortable:i,rootEl:n,name:"select",targetEl:u[h],originalEvt:e}))}else oe=re;ie=s}if(he&&this.isMultiDrag){if((o[j].options.sort||o!==n)&&1<se.length){var g=X(re),v=F(re,":not(."+this.options.selectedClass+")");if(!ue&&c.animation&&(re.thisAnimationDuration=null),s.captureAnimationState(),!ue&&(c.animation&&(re.fromRect=g,se.forEach(function(t){if(t.thisAnimationDuration=null,t!==re){var e=de?X(t):g;t.fromRect=e,s.addAnimationState({target:t,rect:e})}})),pe(),se.forEach(function(t){u[v]?o.insertBefore(t,u[v]):o.appendChild(t),v++}),a===F(re))){var m=!1;se.forEach(function(t){t.sortableIndex===F(t)||(m=!0)}),m&&r("update")}se.forEach(function(t){C(t)}),s.animateAll()}ie=s}(n===o||l&&"clone"!==l.lastPutMode)&&ce.forEach(function(t){t.parentNode&&t.parentNode.removeChild(t)})}},nullingGlobal:function(){this.isMultiDrag=he=!1,ce.length=0},destroyGlobal:function(){this._deselectMultiDrag(),s(document,"pointerup",this._deselectMultiDrag),s(document,"mouseup",this._deselectMultiDrag),s(document,"touchend",this._deselectMultiDrag),s(document,"keydown",this._checkKeyDown),s(document,"keyup",this._checkKeyUp)},_deselectMultiDrag:function(t){if(!(void 0!==he&&he||ie!==this.sortable||t&&P(t.target,this.options.draggable,this.sortable.el,!1)||t&&0!==t.button))for(;se.length;){var e=se[0];k(e,this.options.selectedClass,!1),se.shift(),N({sortable:this.sortable,rootEl:this.sortable.el,name:"deselect",targetEl:e,originalEvt:t})}},_checkKeyDown:function(t){t.key===this.options.multiDragKey&&(this.multiDragKeyDown=!0)},_checkKeyUp:function(t){t.key===this.options.multiDragKey&&(this.multiDragKeyDown=!1)}},a(t,{pluginName:"multiDrag",utils:{select:function(t){var e=t.parentNode[j];e&&e.options.multiDrag&&!~se.indexOf(t)&&(ie&&ie!==e&&(ie.multiDrag._deselectMultiDrag(),ie=e),k(t,e.options.selectedClass,!0),se.push(t))},deselect:function(t){var e=t.parentNode[j],n=se.indexOf(t);e&&e.options.multiDrag&&~n&&(k(t,e.options.selectedClass,!1),se.splice(n,1))}},eventProperties:function(){var n=this,o=[],i=[];return se.forEach(function(t){var e;o.push({multiDragElement:t,index:t.sortableIndex}),e=de&&t!==re?-1:de?F(t,":not(."+n.options.selectedClass+")"):F(t),i.push({multiDragElement:t,index:e})}),{items:e(se),clones:[].concat(ce),oldIndicies:o,newIndicies:i}},optionListeners:{multiDragKey:function(t){return"ctrl"===(t=t.toLowerCase())?t="Control":1<t.length&&(t=t.charAt(0).toUpperCase()+t.substr(1)),t}}})}),Rt});
// broken link override:
// https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/js/bootstrap.bundle.min.js
//
// SMuFF WI Common UI functions
//
var MAX_TOOLS = 12;
var autoScroll = true;
var historyIndex = -1;
var swapSortable;
var swapTools = new Array(MAX_TOOLS);
var toolColors = new Array(MAX_TOOLS);
var toastMain;
var toastVersion;
var isTestRunning = false;
var boardOptions = new Array();
var hasMultiservo = false;
var hasTmc = false;
var hasV6S = false;
var hasExtCtrl = false;
var hasSharedStepper = false;
var hasListState = false;
var tmcStatusInterval = 0;
var testCancelled = 0;
var lastFWVersion = 2.28;
var isShowingLoading = false;
var isShowingUnloading = false;
var plzWait = '<br/>Please wait&hellip;';

var colorNames = [
{ label: 'Aqua',        value: 0 }, 
{ label: 'Azure',       value: 0 },
{ label: 'Beige',       value: 0 },
{ label: 'Bisque',      value: 0 },
{ label: 'Black',       value: 0 },
{ label: 'Blue',        value: 0 },
{ label: 'Brown',       value: 0 },
{ label: 'BurlyWood',   value: 0 },
{ label: 'Chartreuse',  value: 0 },
{ label: 'Chocolate',   value: 0 },
{ label: 'Coral',       value: 0 },
{ label: 'Cornsilk',    value: 0 },
{ label: 'Crimson',     value: 0 },
{ label: 'Cyan',        value: 0 },
{ label: 'DimGray',     value: 0 },
{ label: 'FireBrick',   value: 0 },
{ label: 'Fuchsia',     value: 0 },
{ label: 'Gainsboro',   value: 0 },
{ label: 'Gold',        value: 0 },
{ label: 'Gray',        value: 0 },
{ label: 'Green',       value: 0 },
{ label: 'Honeydew',    value: 0 },
{ label: 'Indigo',      value: 0 },
{ label: 'Ivory',       value: 0 },
{ label: 'Khaki',       value: 0 },
{ label: 'Lavender',    value: 0 },
{ label: 'Lime',        value: 0 },
{ label: 'Linen',       value: 0 },
{ label: 'Magenta',     value: 0 },
{ label: 'Maroon',      value: 0 },
{ label: 'MintCream',   value: 0 },
{ label: 'MistyRose',   value: 0 },
{ label: 'Moccasin',    value: 0 },
{ label: 'Navy',        value: 0 },
{ label: 'Olive',       value: 0 },
{ label: 'Orange',      value: 0 },
{ label: 'Orchid',      value: 0 },
{ label: 'Pink',        value: 0 },
{ label: 'Plum',        value: 0 },
{ label: 'Purple',      value: 0 },
{ label: 'Red',         value: 0 },
{ label: 'Sienna',      value: 0 },
{ label: 'Silver',      value: 0 },
{ label: 'Tan',         value: 0 },
{ label: 'Turquoise',   value: 0 },
{ label: 'Transparent', value: 0 },
{ label: 'Violet',      value: 0 },
{ label: 'White',       value: 0 },
{ label: 'Yellow',      value: 0 } 
];
var materialNames = [
{ label: 'PLA',         value: 0 },
{ label: 'PETG',        value: 0 },
{ label: 'PC',          value: 0 },
{ label: 'PA',          value: 0 },
{ label: 'ASA',         value: 0 },
{ label: 'ABS',         value: 0 },
{ label: 'CF',          value: 0 },
{ label: 'PVA',         value: 0 },
{ label: 'Flex',        value: 0 },
{ label: 'HIPS',        value: 0 }
];

$(document).ready(function(){
    
    /*
    if (!'serial' in navigator) {
    }
    */
    $.get("fwversion.txt", function(data) {
        console.log('Lastest SMuFF Firmware version: ' + data);
        lastFWVersion = parseFloat(data);
    });
    
    var themesheet = $('<link href="'+$('#themes').val()+'" rel="stylesheet" />');
    themesheet.appendTo('head');
    
    if(localStorage.getItem('Theme') != null) {
        var storedTheme = localStorage.getItem('Theme');
        $('#themes').val(storedTheme);
        themesheet.attr('href',storedTheme).promise()
            .done(function(){
                initUI();
                setTimeout(function() {
                    initUI2();
                }, 1000);
            });
    } 
    else  {
        initUI();
        initUI2();
    }
    
    $('#themes').on('change', function(){
        themesheet.attr('href',$(this).val()).promise()
            .done(function(){
                setTimeout(function() {
                    initUI2();
                }, 1000);
            });
        localStorage.setItem('Theme', $(this).val());
    });
    
    var toastElList = [].slice.call(document.querySelectorAll('.toast'))
    var toastList = toastElList.map(function (toastEl) {
      // Creates an array of toasts (it only initializes them)
      return new bootstrap.Toast(toastEl) // No need for options; use the default options
    });
    toastVersion = toastList[0];
    toastMain = toastList[1];
    
    swapSortable = Sortable.create(toolsswaplist, {
	    swap: true, 
	    swapClass: 'swapping-highlight', 
	    animation: 250,
        store: {
            get: function(sortable){
                //console.log("store-get");
            },
            set: function(sortable){
                var order = swapSortable.toArray();
                var n = 0;
                order.forEach(function(elem) {
                    swapTools[n++] = parseInt(elem.substring(3));
                }); 
                //console.log("store-set: " + swapTools);
            }
        }
    });
    
    var historySortable = Sortable.create(historyitemscontainer, {
	    swap: false, 
	    swapClass: 'swapping-highlight', 
	    animation: 250,
        store: {
            get: function() {
                var json = localStorage.getItem("CmdHistory");
                if(json !== undefined) {
                    var list = JSON.parse(json);
                    if(list != null) {
                        list.forEach(function(item) {
                            createHistoryItem(item);
                        });
                    }
                }
            },
            set: function() {
                var json = "[ ";
                var parent = $('#historyitemscontainer');
                for(var i=0; i< parent.children().length; i++) {
                    var txt = $(parent.children()[i]).find('span').text();
                    json += '\"'+txt+'\"';
                    if(i< parent.children().length-1)
                        json += ',';
                }
                json +=' ]';
                localStorage.setItem("CmdHistory", json);
                showToast('History has been saved locally.');
            }
        }
    });
    

    $('#accordion-settings input, #accordion-settings select').on('change', function(){
        showChangesPending(true);
        if($(this).hasClass('form-check-input')) {
            var state = $(this).prop('checked');
            switch($(this).prop('id')) {
                case 'UsePurge':
                    setCheckmark($('#card-purge'), state);
                    break;
                case 'SendStats':
                    setCheckmark($('#card-sendstat'), state);
                    break;
                case 'Revolver-UseServo':
                    if(state)
                        $('#Revolver-TMC-Mode').val(0).trigger('change');
                    break;
            }
            if(checkForChange($(this))) {
                sendChange($(this));
            }
        }
    });

    $('#accordion-settings input').on('focusout', async function(){
        showChangesPending(true);
        if(checkForChange($(this))) {
            sendChange($(this));
            if($(this).prop('id')=='Revolver-ServoClose') {
                $('#servo-closed-modal').modal('show');
            }
        }
    });

    $('#accordion-settings select').on('change', async function(){
        showChangesPending(true);
        if(checkForChange($(this))) {
            sendChange($(this));
        }
    });
    
    $('#console-container').on('hide.bs.collapse', function () {
        $('#console-toggle-icon').toggleClass('down');
        localStorage.setItem('Console', 'closed');
    });
    
    $('#console-container').on('show.bs.collapse', function () {
        $('#console-toggle-icon').toggleClass('down');
        localStorage.setItem('Console', 'opened');
    });
    
    $('#toast-placement').on('hide.bs.toast', function(){
        $(this).addClass('hidden').removeClass('d-inline').removeClass('d-flex');
        $(this).find('.toast').each(function() {
            $(this).removeClass('d-flex');
        });
    });
    $('#toast-placement').on('show.bs.toast', function(){
        $(this).removeClass('hidden').addClass('d-inline').addClass('d-flex');
        $(this).find('.toast').each(function() {
            $(this).addClass('d-flex');
        });
    });

    if(localStorage.getItem('Console')=='closed') {
        $('#console-container').toggleClass('show');
    }
    $('#btn-selector-settings').trigger('click');
    $('#btn-settings-general').trigger('click');

    $('#connect, #connecting-message, #smuff-image').on('click', function(){
        if ('serial' in navigator) {
            $('#connecting-message').fadeOut('slow', function() {
                $('#connecting-message').text('Connecting with SMuFF, please pick a serial port...').fadeIn();
            });
            connectSerial();
        }
        else {
            showToast('Your browser doesn\'t support Web Serial! Please try a different browser&hellip;')
            $('#connecting-message').html('Connection failed!');
        }
    });
    
    $('.navbar-nav#main .nav-item').on('click', async function() {
        var section = $(this).data('section');
        if(section !== undefined) {
            if(section == '#disconnect') {
                await disconnectSerial();
                showConnect();
            }
            else {
                $('li.nav-item').removeClass('activeSection');
                $(this).addClass('activeSection');
                $('.section:not('+section+')').hide();
                $(section).fadeIn('slow');
                if(section == '#sec-statusinfo') {
                    if(tmcStatusInterval == 0) {
                        tmcStatusInterval = setInterval(function(){
                            $('#btn-refresh-tmc-stats').trigger('click');
                        }, 750);
                    }
                }
                else {
                    if(tmcStatusInterval != 0) {
                        clearInterval(tmcStatusInterval);
                        tmcStatusInterval = 0;
                    }
                }
            }
        }
    });
    
    $('#console-text-container').on('scroll', function() {
        if($(this).scrollTop()+$(this).height()  >= $(this)[0].scrollHeight)
            autoScroll = true;
        else
            autoScroll = false;
    });
    
    $('.remove-history-entry').on('click', function(){
        $(this).parent().remove();    
    });
    
    $('#gcode').keypress(function (e) {
        if(e.which == 13) {
            $('#btn-send-gcode').trigger('click');
        }
    });
    
    $('#gcode').keydown(function (e) {
        var parent = $('#historyitemscontainer');
        if(e.which == 38) { // Cursor-Up
            e.preventDefault();
            historyIndex--;
            if(historyIndex < 0)
                historyIndex = parent.children().length-1;
            setGcodeHistory();
        }
        if(e.which == 40) { // Cursor-Down
            e.preventDefault();
            historyIndex++;
            if(historyIndex >= parent.children().length)
                historyIndex = 0;
            setGcodeHistory();
        }
    });
    // handle function keys F1-F4 
    $('body').on('keydown', function(e) {
        var keyCode = e.keyCode || e.which;
        if(keyCode >= 112 && keyCode <= 115) {
            e.preventDefault();
            sendPFKey(keyCode-0x20);
        }
    });
    
    $('#version-info, #release-notes').on('click', function(){
        $('#recent-changes-modal').modal('show');
    });
    
    $('#logo, #smuff').on('click', function(){
        location.href = 'https://sites.google.com/view/the-smuff/';
    });
    
    // handle console buttons
    $('#btn-send-gcode').on('click', async function() {
        // create a new history entry
        var gcode = $('#gcode').val();
        if(gcode != undefined && gcode.length > 0) {
            createHistoryItem(gcode);
            // send line to SMuFF
            sendGcode(gcode, true, true);
            await getResponse();
            historyIndex = -1;
        }
        $('#gcode').val('');
    });
    $('#btn-clear-gcode').on('click', function() {
        $('#console-text-container').empty();
    });

    // handle function keys
    $('#btn-pf1').on('click', function() { sendPFKey(0x50); });
    $('#btn-pf2').on('click', function() { sendPFKey(0x51); });
    $('#btn-pf3').on('click', function() { sendPFKey(0x52); });
    $('#btn-pf4').on('click', function() { sendPFKey(0x53); });
    // handle function buttons    
    $('#btn-home').on('click', function() { sendGcode('G28', true, true); });
    $('#btn-motors-off').on('click', function() { sendGcode('M18', true, true); });
    $('#btn-tool-maint').on('click', function() { sendGcode('TM', true, true); });
    $('#btn-wipe').on('click', function() { sendGcode('G12', true, true); });
    $('#btn-cut').on('click', function() { sendGcode('G12C', true, true); });
    $('#btn-load').on('click', function() { sendGcode('M700', true, true); showLoading(); });
    $('#btn-unload').on('click', function() { sendGcode('M701', true, true); showUnloading(); });
    $('#btn-reset').on('click', function() { sendGcode('M999', true, true); });
    $('#btn-view-script').on('click', async function() { 
        var script = $('#test-files option:selected').text();
        if(script != '') {
            sendGcode('M20L"test/'+script+'.gcode"');
            await getResponse();
            if(responseBuffer != '') {
                $('#script-name').text(script);
                $('#script-content').val(responseBuffer);
                $('#view-script-modal').modal('show');
            }
        }
    });
    $('#btn-run-test').on('click', async function() { 
        var state;
        if($(this).data('state')=='stopped') {
            var script = $('#test-files option:selected').text();
            localStorage.setItem("runningScript", script);
            sendGcode('M98P"'+ script + '"', true, false); 
            await getResponse();
            state = true;
            testCancelled = 0;
        }
        else {
            localStorage.setItem("runningScript", "");
            sendChar('\x03');
            state = false;
            testCancelled = new Date().getTime();
        }
        showTestRunning(state);
    });
    $('#btn-save-settings').on('click', function(){
        showToast('Saving Settings&hellip;');
        saveConfig();
        removeValFeedback();
    });
    $('#btn-reload-settings').on('click', function() { 
        showToast('Reloading Settings&hellip;');
        requestInit();
        removeValFeedback();
    });
    $('#btn-reset-swaps').on('click', function() {
        var order = swapSortable.toArray();
        order.sort();
        swapSortable.sort(order, true);
        swapSortable.save();
    });
    $('#btn-save-swaps').on('click', async function() {
        var json = "{ ";
        for(var i=0; i< swapTools.length; i++) { 
            json += '\'\'T'+i+'\'\': '+swapTools[i];
            if(i< swapTools.length-1)
                json += ',';
        }
        json +=' }';
        sendGcode('M504P"Swaps"S"'+json+'"',false, false);
        if(await getResponse())
            showToast('Tool-Swaps have been saved.');
    });
    $('#btn-save-history').on('click', function() {
        historySortable.save();
    });
    
    $('#btn-modal-ok').on('click', async function() {
        $('#restart-modal').modal('hide');
        sendGcode('M999');
        await getResponse();
    });
    $('#btn-modal-wipe-ok').on('click', async function() {
        $('#wipe-sequence-modal').modal('hide');
        var seq = 'S'+$('#wipe-S').val() + 'I'+$('#wipe-I').val() + 'J'+$('#wipe-J').val() + 'P'+$('#wipe-P').val() + 'R'+$('#wipe-R').val();
        $('#WipeSeq').val(seq);
        sendChange($('#WipeSeq'));
    });
    $('#btn-servo-ok').on('click', function() {
        $('#servo-closed-modal').modal('hide');
        var pos = $('#Revolver-ServoClose').val();
        $('input[id^="Close-"]').each(async function() {
            $(this).val(pos).trigger('focusout');
            await getResponse();
        });
    });
   
    // handle card clicks    
    $('#card-relay').on('click', async function() { 
        if(!hasSharedStepper || isTestRunning)
            return;
        var state = $(this).find('span#state').data('state');
        var newState = (state =='I' ? 'E' : 'I');
        $(this).find('span#state').data('state', newState);
        setRelayState(newState);
        sendGcode('M17' + newState, true, false);
        await getResponse();
    });
    $('#card-lid').on('click', async function() { 
        if(isTestRunning)
            return;
        var icon = $(this).find('i');
        var state = icon.data('state');
        var newState = state =='0' ? '1' : '0';
        if(!hasListState)
            setLidIcon(newState);
        sendGcode('M280R' + newState, true, false); 
        await getResponse();
    });
    $('#card-purge').on('click', async function() { 
        if(hasExtCtrl || isTestRunning)
            return;
        var icon = $(this).find('i');
        var state = icon.data('state');
        var newState = state =='0' ? '1' : '0';
        setCheckmark(this, newState);
        sendGcode('M205P"UsePurge"S' +  newState, true, false); 
        await getResponse();
        sendGcode('M503S1W', false, false); 
        await getResponse();
    });
    $('#card-sendstat').on('click', async function() {
        if(isTestRunning)
            return;
        var icon = $(this).find('i');
        var state = icon.data('state');
        var newState = state =='0' ? '1' : '0';
        setCheckmark(this, newState);
        sendGcode('M205P"SendStats"S' + newState, true, false);
        await getResponse();
        sendGcode('M503S1W', false, false); 
        await getResponse();
    });

    $('#tmc-status').on('click', function() {
        $('.nav-item[data-section="#sec-statusinfo"]').trigger('click');
    });
    // handle tool selection
    $('#tool-selection').on('change', async function() { 
        if($(this).val() == -1) {
            sendGcode('G28X', true, false);
            await getResponse();
        }
        else {
            sendGcode($(this).val(), true, false); 
            await getResponse();
        }
    });
    
    $('[id^=history-item-]').on('click', function() {
        $('#gcode').focus();
        $('#gcode').val($(this).find('span').text());
    });
    
    $('#WipeSeq').on('focus, click', function() {
        var data = $(this).val().matchAll(/([a-zA-Z]\d{1,3})/g);
        for(const m of data) {
            console.log(m[0]);
            $('#wipe-'+ m[0].toUpperCase()[0]).val(m[0].substring(1));
        }
        $('#wipe-sequence-modal').modal('show');
    });

    $('#Revolver-ServoClose').on('change', async function(){
        if(!initDone)
            return;
        var pos = $(this).val();
        sendGcode('M205P"ServoClose"S'+pos+'I99');
        await getResponse();
    });

    $('#Revolver-ServoOpen').on('change', async function(){
        if(!initDone)
            return;
        var pos = $(this).val();
        sendGcode('M205P"ServoOpen"S'+pos+'I99');
        await getResponse();
    });
    
    
});

function initUI() {
    
    // hide all templates
    $('#swap-tools-template-container').addClass('hidden').removeClass('d-flex');
    $('#materials-tool-template').addClass('hidden').removeClass('d-flex');
    $('#history-items-template-container').addClass('hidden').removeClass('d-flex');
    $('#console-templates').addClass('hidden').removeClass('d-flex');
    $('#materials-template').addClass('hidden').removeClass('d-flex');
    $('#servomap-template').addClass('hidden').removeClass('d-flex');
    $('#sec-status, #sec-dashboard, #sec-settings, #sec-swaptools, #sec-statusinfo, #sec-testrun, #sec-boardinfo').fadeOut('fast');
    // hide navbar until connected
    $('#nav-container').addClass('hidden');
    $('#test-status').addClass('hidden');
    $('#tmc-status').addClass('hidden');
    $('#tmc-stat-0').addClass('hidden');
    $('#tmc-stat-1').addClass('hidden');
    $('#tmc-stat-2').addClass('hidden');
    $('#tmc-stat-3').addClass('hidden');
    $('#toast-placement').addClass('hidden').removeClass('d-flex').removeClass('d-inline');
    
    showChangesPending(false);

    $('#tmcwarn-label').text('');
    $('#version-label').text('');
    $('#electronics-label').text('');
    $('#mode-label').text('');
    $('#console-text').text('');
    $('#test-files').empty();
    $('#test-files').append(new Option(localStorage.getItem('runningScript'), ''));
}

function initUI2() {
    $('#relay-status').css('background-color', $('.card').css('color'));
    $('#relay-status').css('color', $('.card').css('background-color'));
}

function addSentGcode(gcode) {
    if(gcode == undefined)
        return;
    var parent = $('#console-text-container');
    var templ = $('#send-template').clone(true);
    templ.attr('id','');
    templ.removeClass('hidden');
    templ.text(gcode);
    parent.append(templ);
}

async function addReceivedGcode(gcode) {
    if(gcode == undefined)
        return;
    if($('#console-text-container span').length > 3000) {
        $('#console-text-container').find('span:first').remove();
    }
    var parent = $('#console-text-container');
    var templ = $('#receive-template').clone(true);
    templ.attr('id','');
    templ.removeClass('hidden');
    templ.html(gcode);
    parent.append(templ);
    if(autoScroll)
        parent.scrollTop(parent[0].scrollHeight);
}

function createHistoryItem(gcode) {
    if(gcode == undefined)
        return;
    var n = 0;
    var parent = $('#historyitemscontainer');
    for(var i=0; i< parent.children().length; i++) {
        var txt = $(parent.children()[i]).find('span').text();
        if(txt != undefined && txt.toUpperCase().trim()==gcode.toUpperCase().trim())
            return;
        n++;
    }
    var templ = $('#history-item-template').clone(true);
    var span = templ.find('span');
    span.attr('id','');
    var icon = templ.find('i');
    icon.attr('id','')
    span.text(gcode);
    templ.attr('id','history-item-' + n);
    templ.css('cursor','pointer');
    parent.append(templ);
}

function showLoading() {
    if(seenError)
        return;
    var tool = $('#tool-selection').val();
    if(tool != -1) {
        var info = '<h2>Loading Filament for '+tool+'</h2>'+plzWait;
        showInfo(info);
        isShowingLoading = true;
    }
}

function showUnloading() {
    if(seenError)
        return;
    var tool = $('#tool-selection').val();
    if(tool != -1) {
        var info = '<h2>Unloading Filament from '+tool+'</h2>'+plzWait;
        showInfo(info);
        isShowingUnloading = true;
    }
}

function showPurging(line) {
    if(line != '') {
        var data = line.matchAll(/([A-Z]:)(\d+.?\d*)/g);
        var forTool = -1;
        var len = 0;
        var cubic = 0;
        for(const m of data) {
            switch(m[1]) {
                case "T:": forTool = parseInt(m[2]); break;
                case "L:": len = parseInt(m[2]); break;
                case "C:": cubic = parseFloat(m[2]); break;
            }
        }
        if(forTool != -1) {
            var info = '<h2>Purging Tool ' + forTool + '</h2>Amount: ' + len +' mm or ' +cubic+' mm³<br/>'+plzWait;
            //console.log(info);
            setTimeout(function(){
                showInfo(info);
            }, 500);
        }
    }
    else
        cancelInfo();
};

function showTestRunning(state) {
    if(state==true && testCancelled > 0) {
        if(new Date().getTime()-testCancelled < 4000)
            return;
    }
    var elem = $('#btn-run-test');
    var span = $('#test-status');
    var runningScript = localStorage.getItem("runningScript");
    if(state) {
        if(elem.data('state') != 'running') {
            elem.data('state', 'running');
            elem.find('i').removeClass('fa-play');
            elem.find('i').addClass('fa-stop');
            span.removeClass('hidden');
            span.html('Test <i>"' + runningScript +'"</i> is running&hellip;');
            isTestRunning = true;
            $('.nav-item[data-section="#sec-dashboard"] .nav-link').addClass('hidden');
            $('.nav-item[data-section="#sec-settings"] .nav-link').addClass('hidden');
            $('.nav-item[data-section="#sec-swaptools"] .nav-link').addClass('hidden');
            $('.nav-item[data-section="#sec-statusinfo"] .nav-link').addClass('hidden');
            setDisabled(true, '.sec-status');
            $('#sec-status').hide('slow');
        }
    }
    else {
        if(elem.data('state') != 'stopped') {
            elem.data('state', 'stopped');
            elem.find('i').removeClass('fa-stop');
            elem.find('i').addClass('fa-play');
            span.addClass('hidden');
            span.text(span.text().replace(runningScript, '{TEST}'));
            isTestRunning = false;
            $('.nav-item[data-section="#sec-dashboard"] .nav-link').removeClass('hidden');
            $('.nav-item[data-section="#sec-settings"] .nav-link').removeClass('hidden');
            $('.nav-item[data-section="#sec-swaptools"] .nav-link').removeClass('hidden');
            if(hasTmc)
                $('.nav-item[data-section="#sec-statusinfo"] .nav-link').removeClass('hidden');
            setDisabled(false, '.sec-status');
            $('#sec-status').show('slow');
        }
    }
}

function setCheckmark(elem, state) {
    var icon = $(elem).find('i');
    icon.data('state', state);
    if(icon.prop('id')!='send-stat') {
        icon.removeClass('fa-check-circle fa-times-circle');
        icon.addClass(state == '0' ? 'fa-times-circle' : 'fa-check-circle');
    }
    else {
        icon.removeClass('fa-repeat fa-times-circle fa-spin');
        icon.addClass(state == '0' ? 'fa-times-circle' : 'fa-repeat fa-spin');
    }
}

function hideConnect() {
    $('#sec-start').fadeOut('slow')
        .promise()
        .done(function() { 
            $('#sec-dashboard, #sec-status').fadeIn('fast');
            $('li.nav-item[data-section="#sec-dashboard"]').addClass('activeSection');
            $('li.nav-item[data-section!="#sec-dashboard"]').removeClass('activeSection');
        });
    $('#nav-container').removeClass('hidden');
}

function showConnect() {
    $('#sec-status, #sec-dashboard, #sec-settings, #sec-swaptools, #sec-statusinfo, #sec-testrun').fadeOut('fast')
        .promise()
        .done(function() { 
            $('#sec-start').fadeIn('fast');
            $('#connecting-message').text('Disconnected...').fadeIn('slow');
            setTimeout(function() {
                $('#connecting-message').fadeOut('slow', function() {
                    $('#connecting-message').text('Click here to connect...').fadeIn('slow');
                })
            }, 2000);
    });
    $('#nav-container').addClass('hidden');
}

async function sendChange(elem) {
    if(!initDone)
        return;
    var cmd = buildM205Command(elem);
    if(cmd != '') {
        elem.removeClass('val-failed');
        //console.log('cmd >> ' + cmd);
        sendGcode(cmd);
        var stat = await getResponse();
        elem.addClass(stat ? 'val-changed' : 'val-failed');
        if(!stat)
            showToast('Setting this value on the SMuFF has failed!<br/><br/>Please check console output for detailed information.');
    }
}

function setValue(cfg, prefix) {
    var ndx = 0;
    for (var key of Object.keys(cfg)) {
        //console.log(key + " -> " + cfg[key])
        var hasKey = false;
        var pfx;
        if(prefix.indexOf('${key}') > -1) { 
            pfx = prefix.replace('${key}',key);
            hasKey = true;
        }
        else
            pfx = prefix;
        var item = $('#' + pfx + (hasKey ? '' : key));
        if(item != undefined) {
            if(item.prop('type')=='checkbox') {
                var state;
                /*
                item.data('state', state ? '1' : '0');
                item.val(state ? '1' : '0');
                */
                var stateName;
                if(typeof cfg[key] =='boolean') {
                    state = cfg[key];
                    switch(cfg[key]) {
                        case true: stateName = 'Yes'; break;
                        case false: stateName = 'No'; break;
                    }
                }
                else {
                    switch(cfg[key]) {
                        case 1: state = true; stateName = 'HIGH'; break;
                        case 0: state = false; stateName = 'LOW'; break;
                    }
                }
                item.prop('checked', state);
                item.attr('data-bs-original-title',stateName);
            }
            else if(item.prop('type')=='color') {
                item.val('#'+cfg[key]);
            }
            else {
                item.val(cfg[key]);
            }
            // trigger change event
            item.trigger('change');
        }
        else {
            console.log('Control #'+key+ ' not found!');
        }
        ndx++;
    }
}

function setSwaps() {
    var toolcnt = parseInt($('#Tools').val());
    var parent1 = $('#swap-tools-container #slots ul');
    var parent2 = $('#swap-tools-container #tools ul');
    parent1.empty();
    parent2.empty();
    for(var i=0; i < toolcnt; i++) {
        var templ1 = $('#slot-item-template').clone(true);
        templ1.append('<span>Slot ' + i +':' + '</span>');
        templ1.append('<span class="slot-tool-color">' + (toolColors[i]!='' ? '(' :'') + toolColors[i] + (toolColors[i]!='' ? ')' :'')+'</span>');
        templ1.attr('id', 'slot'+ i);
        parent1.append(templ1);
        var templ2 = $('#swap-item-template').clone(true);
        templ2.text(templ2.text() + (swapTools[i] === undefined ? i : swapTools[i]));
        templ2.attr('id', 'swap-tool'+ i);
        templ2.attr('data-id', 'st-'+ swapTools[i]);
        templ2.css('cursor','grab');
        templ2.append('<i class="fa fa-reorder"></i>');
        parent2.append(templ2);
    }
}

function setTMCstats(cfg) {
    var notUsed = 0;
    var axis = cfg['TMCStatus']['Axis'];
    if(cfg['TMCStatus']['InUse'] == true) {
        $('#tmc-stat-'+axis).removeClass('hidden');
        for (var key of Object.keys(cfg['TMCStatus'])) {
            var item = $('#tmc-stat-'+axis+'-'+key);
            if(key=='Version') {
                if(parseInt(cfg['TMCStatus'][key]) < 1) {
                    showToast('Version mismatch on TMC driver!<br/>Please check your hardware setup!');
                    $('#tmc-status').removeClass('hidden');
                }
            }
            item.text(cfg['TMCStatus'][key]);
            if(item.parent().data('alert')!==undefined) {
                if(item.text() != 'No') {
                    item.addClass('tmc-warning');
                    $('#tmc-status').removeClass('hidden');
                }
                else {
                    item.removeClass('tmc-warning');
                }
            }
        }
    }
    else {
        $('#tmc-stat-'+axis).addClass('hidden');
        notUsed++;
    }
    if(notUsed == 4) {
        hasTmc = false;
        hideStatusInfoNav();
    }
}

function setSettings(line, configType) {
    var cfg;
    try {
        cfg = JSON.parse(line);
        if(configType=='TMC') {
            setTMCstats(cfg);
        }
        if(configType=='Basic') {
            localStorage.setItem('M503S1', line);
            setValue(cfg, '');
            setValue(cfg['Baudrates'], 'baudrate-');
        }
        if(configType=='Steppers') {
            localStorage.setItem('M503S2', line);
            setValue(cfg['Selector'], 'Selector-');
            setValue(cfg['Revolver'], 'Revolver-');
            setValue(cfg['Feeder'], 'Feeder-');
        }
        if(configType=='TMC Driver') {
            localStorage.setItem('M503S3', line);
            setValue(cfg['Selector'], 'Selector-TMC-');
            setValue(cfg['Revolver'], 'Revolver-TMC-');
            setValue(cfg['Feeder'], 'Feeder-TMC-');
        }
        if(configType=='Servo mapping') {
            localStorage.setItem('M503S4', line);
            var toolcnt = parseInt($('#Tools').val());
            for(var i=0; i < toolcnt; i++) {
                setValue(cfg['T'+i], 'servomap-'+i+' [id="${key}-'+i+'"]');
            }
            setValue(cfg['Wiper'], 'servomap-'+(toolcnt+1)+' [id="${key}-Wiper"]');
        }
        if(configType=='Materials') {
            localStorage.setItem('M503S5', line);
            var toolcnt = parseInt($('#Tools').val());
            toolColors = new Array(toolcnt);
            for(var i=0; i < toolcnt; i++) {
                setValue(cfg['T'+i], 'materials-tool-'+i+' [id="${key}-'+i+'"]');
                toolColors[i] = $('#materials-tool-'+i+' [id="Color-'+i+'"]').val();
            }
        }
        if(configType=='Tool swaps') {
            localStorage.setItem('M503S6', line);
            for(var i=0; i < MAX_TOOLS; i++) {
                swapTools[i] = cfg['T'+i];
            }
            setSwaps();
        }
        configType ='';
    }
    catch(e) {
        console.log(e);
        return;
    }
}

function addTestFiles(line) {
    var json = JSON.parse(line);
    $('#test-files').empty();
    if(json != null) {
        json.forEach(function(item) {
            var end = item.indexOf('.gcode');
            if(end != -1) {
                var name = item.substring(0,end);
                $('#test-files').append(new Option(name, ''));
            }
        });
    }
}

function setRelayState(line) {
    var newState = line.substring(0,1);
    var icon = $('#card-relay').find('span#state');
    icon.data('state', newState);
    icon.text(newState);
}

function setFWInfo(line) {
    hasTmc = false;
    hasV6S = false;
    hasMultiservo = false;
    try {
        var data = line.split(':');
        var boardInfo = data[3].replace(' DATE', '').trim();
        $('#version-label').text(data[2].replace(' ELECTRONICS', ''));
        $('#electronics-label').text(boardInfo);
        $('#mode-label').text(data[5].replace(' OPTIONS', ''));
        try {
            if(data.length >5) {
                console.log('Options: ' + data[6]);
                $('#electronics-label').prop('title', data[6].replaceAll('\|','; '));
                boardOptions = data[6].split('\|');
                setDisabled(true, '.hasNeopixels');
                setDisabled(true, '.hasBacklight');
                setDisabled(true, '.hasTMC');
                setDisabled(true, '.hasV6S');
                setDisabled(false, '.hasNotV6S');
                for(var i=0; i < boardOptions.length; i++) {
                    boardOptions[i] = boardOptions[i].trim();
                    addSentGcode(boardOptions[i]);
                    if(boardOptions[i] == 'MULTISERVO')
                        hasMultiservo = true;
                    if(boardOptions[i] == 'TMC') {
                        hasTmc = true;
                        setDisabled(false, '.hasTMC');
                    }
                    if(boardOptions[i] == 'V6S') {
                        hasV6S = true;
                        setDisabled(false, '.hasV6S');
                        setDisabled(true, '.hasNotV6S');
                    }
                    if(boardOptions[i] == 'NEOPIXELS') {
                        setDisabled(false, '.hasNeopixels');
                    }
                    if(boardOptions[i].startsWith('MINIPANEL V2')) {
                        setDisabled(false, '.hasBacklight');
                    }
                }
                if(!hasV6S) {
                    $('#tmc-mode-revolver').addClass('hidden').removeClass('d-flex');
                    $('#tmc-section-revolver').addClass('hidden').removeClass('d-flex');
                }
            }
        }
        catch(e) {
            console.log(e);
        }
        try {
            boardInfo = boardInfo.replaceAll(' ', '_');
            $('#pins-image').prop('src', 'assets/img/'+ boardInfo + '.png');
            $('#wiring-image').prop('src', 'assets/img/'+ boardInfo + '_Wiring.png');
        }
        catch(e) {
            hideBoardInfoNav();    
        }
        hideStatusInfoNav();
        var curVersion = parseFloat($('#version-label').text().trim().substring(1));
        if(curVersion < 2.26) {
            $('#version-label').addClass('version-warning');
            var fwWarning = 'This SMuFF-Firmware version is outdated for this app! Install at least version 2.26';
            $('#version-label').prop('title', fwWarning);
            showToast(fwWarning);
        }
        if(curVersion < lastFWVersion) {
            $('#latest-version-info').text(lastFWVersion);
            setTimeout(function(){
                toastVersion.show();
            }, 3000);
        }
    }
    catch(e) {
        console.log(e);
    }
}

function hideStatusInfoNav() {
    if(!hasTmc)
    $('.nav-item[data-section="#sec-statusinfo"] .nav-link').addClass('hidden');
}

function hideBoardInfoNav() {
    if(!hasTmc)
    $('.nav-item[data-section="#sec-boardinfo"] .nav-link').addClass('hidden');
}

function setStatus(line) {
    var states = line.substring(14);  // skip 'echo: states: ');
    //console.log(states);
    //'T: T-1 S: on R: off F: off F2: off TMC: off SD: on SC: on L: off'
    hasListState = false;
    var data = states.matchAll(/([A-Z]{1,3}[\d|:]+).(\w+|-?\d+)+/g);
    for(const m of data) {
        //console.log(m[0] +' --- |' + m[1] + '|' +m[2] +'|');
        var isOn = (m[2] == 'on');
        switch(m[1]) {
            case "T:": $('#tool-selection').val(m[2]); break;
            case "S:": setCheckmark($('#card-selector'), isOn); break;
            case "R:": setCheckmark($('#card-revolver'), isOn); break;
            case "F:": setCheckmark($('#card-feed1'), isOn); break;
            case "F2:": setCheckmark($('#card-feed2'), isOn); break;
            case "SD:": 
                if(isOn) 
                    showSDWarning(); 
                else 
                    cancelSDWarning(); 
                break;
            case "SC:": 
                if(isOn) {
                    setTimeout(function() {
                        $('#btn-reload-settings').trigger('click');
                    }, 2000);
                }
                break;
            case "LID:": setLidIcon(isOn); hasListState = true; break;
        }
    }
}

function setTestResults(line) {
    try {
        var json = JSON.parse(line.substring(15));   // skip 'echo: testrun: ');
        $('#tst-elapsed').text(json['Elapsed']);
        $('#tst-loopcnt').text(json['Loops']);
        $('#tst-cmdcnt').text(json['Cmds']);
        $('#tst-changes').text(json['ToolChanges']);
        $('#tst-feederr').text(json['FeederErrors']);
        $('#tst-stallselector').text(json['SelectorStalls']);
        $('#tst-stallfeeder').text(json['FeederStalls']);
        var ok = json['FeedsOk'].split('\|');
        var failed = json['FeedsMissed'].split('\|');
        for(var i=0; i<ok.length; i++) {
            var t_ok = ok[i].trim();
            var t_fail = failed[i].trim();
            if(t_ok.length > 0)
                $('#tst-ok-'+i).text(t_ok);
            if(t_fail.length > 0)
                $('#tst-fail-'+i).text(t_fail);
        }
    }
    catch(e) {
        console.log(e);
    }
}

function showToast(msg) {
    $('#toast-message').html(msg);
    toastMain.show();   
}

function showInfo(msg) {
    $('#info-message').html(msg);
    $('#info-modal').modal('show');
}

function cancelInfo() {
    $('#info-modal').modal('hide');
}

function showError(msg) {
    $('#serious-error-message').html(msg);
    $('#serious-error-modal').modal('show');
}

function cancelError() {
    $('#serious-error-modal').modal('hide');
}

function showSDWarning() {
    $('#sd-warning').modal('show');
}

function cancelSDWarning() {
    $('#sd-warning').modal('hide');
}

function showChangesPending(state) {
    if(state) {
        $('#changes-pending').show();
    }
    else {
        $('#changes-pending').hide();
    }
    changesPending = state;
}

function replaceId(id) {
    // rename property ids
    id = id.replace('Selector-','');
    id = id.replace('Feeder-','');
    id = id.replace('Revolver-','');
    id = id.replace('TMC-','');
    return id;
}

function normalizeId(id) {
    var idx = -1;
    if(id.startsWith('Material-')) {
        idx = id.substring(9); 
        id = id.substring(0, 8);
    }
    if(id.startsWith('Color-')) {
        idx = id.substring(6); 
        id = id.substring(0, 5);
    }
    if(id.startsWith('PFactor-')) {
        idx = id.substring(8); 
        id = id.substring(0, 7);
    }
    if(id.startsWith('CValue-')) {
        idx = id.substring(7); 
        id = id.substring(0, 6);
    }
    if(id.startsWith('Close-')) {
        idx = id.substring(6); 
        id = id.substring(0, 5);
    }
    if(id.startsWith('Output-')) {
        idx = id.substring(7); 
        id = id.substring(0, 6);
    }
    if(id.startsWith('baudrate-')) {
        idx = id.substring(9); 
        id = idx;
    }
    return [ id, idx ];
}

function buildM205Command(elem) {
    var val;
    var id = elem.prop('id');
    if(id =='M' && id =='C' && id == 'CV' && id =='PF' && id =='O' && id =='P') {
        return '';  // ignore templates
    }
    var prop = elem.prop('localName');
    var type = elem.prop('type');
    var section = elem.attr('data-section');
    var subsection = elem.attr('data-subsection');
    if(id=='') {
        console.log('>>> No ID <<< for prop: ' + prop + ' of type: ' +type);
    }
    if(prop == 'input' || prop == 'select') {
        if(type == 'text')
            val = '"' + elem.val() +'"';
        else if(type == 'color')
            val = '"' + elem.val().substring(1) +'"';
        else if(type == 'checkbox') {
            val = elem.is(':checked') ? 1 : 0;
        }
        else {
            val = (isNaN(elem.val()) ? null : elem.val());
        }
    }
    if(val != null) {
        // rename property ids
        id = replaceId(id);
        const norm = normalizeId(id);
        if(id.startsWith('baudrate-')) {
            id='Baudrates';
            val = '"' + val + '"';
        }
        else {
            id = norm[0];
        }
        idx = norm[1];
        //console.log('"' + id +'": ' + val + '   [' +section +']' + (subsection !== undefined ? ' ['+subsection+']' : ''));
        var axis = '';
        if(subsection !== undefined) {
            switch(subsection) {
                case 'Selector':
                    axis = 'X';
                    break;
                case 'Revolver':
                    axis = 'Y';
                    break;
                case 'Feeder':
                    axis = 'Z';
                    break;
            }
        }
        var cmd = 'M205P"' + id +'" S' + val + ' ' + axis + (idx !=-1 ? ('I'+ idx) : '');
        return cmd;
    }
    else {
        console.log('Skipping null value...');
    }
    return '';
}

function checkForChange(elem) {
    var id = replaceId(elem.attr('id'));
    const norm = normalizeId(id);
    id = norm[0];
    idx = norm[1];
    
    var section = elem.attr('data-section');
    var subsection = elem.attr('data-subsection');
    var isCheckbox = elem.prop('type')=='checkbox';

    var cfg = JSON.parse(localStorage.getItem('M503'+section));
    var val = ''
    if(subsection !== undefined)
        val = cfg[subsection][id];
    else
        val = cfg[id];
    
    if(val !== undefined) {
        var elemval;
        var stateName;
        if(isCheckbox) {
            elem.tooltip('hide');
            if(elem.prop('checked')==true) {
                if(typeof val == 'boolean') {
                    elemval = true;
                    stateName = 'Yes';
                }
                else {
                    elemval = 1;
                    stateName = 'HIGH';
                }
            }
            else {
                if(typeof val == 'boolean') {
                    elemval = false;
                    stateName = 'No';
                }
                else {
                    elemval = 0;
                    stateName = 'LOW';
                }
            }
            elem.attr('data-bs-original-title',stateName);
            elem.attr('aria-label',stateName);
            //elem.tooltip('show');
        }
        else
            elemval = elem.val();
        if(val != elemval) {
            try {
                if(subsection !== undefined)
                    cfg[subsection][id] = elemval;
                else
                    cfg[id]  = elemval;
                localStorage.setItem('M503'+section, JSON.stringify(cfg));
                return true;
            }
            catch(e) {
                console.log(e);
            }
        }
    }
    else {
        showToast('WTF? val undefined?! id: <b>'+id+'</b> subsection: <b>'+ subsection +'</b>');
        console.log('val undefined?!');
    }
    return false;
}

async function saveConfig() {
    sendGcode('M500');
    var stat = getResponse();
    if(stat) {
        $('#restart-modal').modal('show');
        showChangesPending(false);
    }
    else {
        
    }
}

function removeValFeedback() {
    $('#accordion-settings input, #accordion-settings select').each(function() {
        $(this).removeClass('val-changed');
        $(this).removeClass('val-failed');
    });
}

function setGcodeHistory() {
    if(historyIndex != -1) {
        var elem = $($('#historyitemscontainer').children())[historyIndex];
        var cmd = $(elem).find('span').text();

        $('#gcode').val(cmd);
        setTimeout(function() {
            $('#gcode').focus();
        }, 100);
    }
}

function setLidIcon(state) {
    var icon = $('#card-lid').find('i');
    icon.data('state', state);
    icon.removeClass('fa-unlock fa-lock');
    icon.addClass(state == '0' ? 'fa-unlock' : 'fa-lock');
}

async function recalculateSpeeds() {
    if(!initDone)
        return;
    var speeds = [  ['Selector-MaxSpeed',   'X' ], 
                    ['Selector-AccelSpeed', 'X' ], 
                    ['Revolver-MaxSpeed',   'Y' ], 
                    ['Revolver-AccelSpeed', 'Y' ],
                    ['Feeder-MaxSpeed',     'Z' ], 
                    ['Feeder-AccelSpeed',   'Z' ],
                    ['Feeder-InsSpeed',     'Z' ],
                    ['Feeder-PurgeSpeed',   'Z' ]
                 ];
    for(var i=0; i< speeds.length; i++) {
        var spd = $('#'+speeds[i][0]).val();
        if(spd != '') {
            var axis = speeds[i][1];
            sendGcode('M205P"XlateSpeed"S'+spd+axis);
            if(await getResponse()) {
                $('#'+speeds[i][0]).val(parseInt(xlatedSpeed));
            }
        }
        else {
            console.log('Speed "'+speeds[i]+'" is not set!');
        }
    }
    showToast('Speeds have been translated! Please check whether they were calculated correctly.');
}

function setDisabled(state, className) {
    var elem = $(className +' input,'+className +' select');
    var label = $(className +' label,' + className +' span, '+className+' i, '+className+' div');
   
    if(!state) {
        elem.removeAttr('disabled');
        elem.css('opacity', '1');
        label.css('opacity', '1');
    }
    else {
        elem.attr('disabled', 'disabled');
        elem.css('opacity','0.5');
        label.css('opacity','0.5');
    }
}

function setAutocompleteColors(elem) {
    const ac = new Autocomplete(elem, {
        data: colorNames,
        maximumItems: 5,
        treshold: 1
    });
    $(elem).on('focusout', function(){
        $(this).parent().find();
    });
}

function setAutocompleteMaterials(elem) {
    const ac = new Autocomplete(elem, {
        data: materialNames,
        maximumItems: 5,
        treshold: 1
    });
}

//
// SMuFF WI Common functions for communication with the SMuFF
//
const MAX_CFG_INDEX = 15;
var nextCfgIndex = -1;
var initDone = false;
var seenOk = false;
var seenError = false;
var prevLine = '';
var configType = '';
var currentSerial = -1;
var xlatedSpeed = 0;
var collectResponse = false;
var responseBuffer = '';
var isPurging = false;


function sleep(milliseconds) {
    return new Promise(resolve => setTimeout(resolve, milliseconds));
}

function getResponse() {
    return new Promise(resolve => gotOk(resolve));
}

async function gotOk(resolve) {
    var timeout = 10000;
    while(!seenOk) {
        await sleep(10);
        timeout -= 10;
        if(timeout <= 0)
            resolve(false);
    }
    collectResponse = false;
    isPurging = false;
    //console.log('Got OK: ');
    resolve(!seenError);
}


async function sendGcode(gcode, log, focusInput, appendNL=true) {
    console.log('Gcode: ' + gcode);
    seenOk = seenError = false;
    if(gcode.length == 0)
        return;
    if(gcode.trim().toUpperCase().startsWith('M20L')) {
        responseBuffer = '';
        collectResponse = true;
    }
    await writer.write(gcode+(appendNL ? '\r\n' : ''));
    if(log) {
        addSentGcode(gcode);
    }
    if(focusInput) {
        $('#gcode').focus();
    }
}

async function sendChar(char) {
    await writer.write(char);
}


function sendPFKey(keycode) {
    var sequence = String.fromCharCode(0x1b, 0x5b, 0x4f, keycode);
    console.log('Seq: ' + sequence);
    var keyStroke = '[PF' + String.fromCharCode(keycode - 0x1F, 0x5d) ;
    addSentGcode(keyStroke);
    sendGcode(sequence, false, true);
}

var port;
var textEncoder;
var writableStream;
var writer;
var readableStream;
var reader;

async function disconnectSerial() {
    if(reader) {
      await reader.cancel();
      await readableStream.catch(() => {});
      reader = null;
      readableStream = null;
    }
    if(writer) {
      await writer.close();
      await writableStream;
      writer = null;
      writableStream = null;
    }
    if(port) {
        await port.close();
        port = null;
    }
}

async function connectSerial(baudrate = 115200) {
    try {
        // Prompt user to select any serial port.
        port = await navigator.serial.requestPort();
        await port.open({ baudRate: baudrate });

        textEncoder = new TextEncoderStream();
        writableStream = textEncoder.readable.pipeTo(port.writable);

        writer = textEncoder.writable.getWriter();
        //hideConnect();
        nextCfgIndex = 0;
        listenToSerial();
        if(!isTestRunning) {
            setTimeout(async function() {
                if(!await requestInit()) {
                    await disconnectSerial();
                    showConnect();
                }
                else
                    hideConnect();
            }, 750);
        }
        else {
            if(isTestRunning) {
                setTimeout(function() {
                    $('.nav-item.activeSection').removeClass('activeSection');
                    $('.nav-item[data-section="#sec-testrun"]').trigger('click');
                }, 500);
            }
        }
    } 
    catch {
        $('#connecting-message').text("Serial Connection Failed!");
    }
}

async function sendInitSeq(gcode) {
    var retry = 5;
    var stat = false;
    do {
        sendGcode(gcode, false, false);
        if(await getResponse()) {
            stat = true;
            break;
        }
        showInfo('Connection failed, retrying...');
        await sleep(1000);
        cancelInfo();
        retry--;
    } while(retry >0);
    return stat;
}

async function requestInit() {
    try {
        initDone = false;
        nextCfgIndex = 0;
        var cmds = ['M115',
                    'M205P"WebInterface"S1',
                    'M503S1W',
                    'M503S2W',
                    'M503S3W',
                    'M503S4W',
                    'M503S5W',
                    'M503S6W',
                    'M20S"/test" F"" W',
                    'M17',
                    'M122W0',
                    'M122W1',
                    'M122W2',
                    'M122W3',
                    'M205P"SendStats"S1'
                   ];

        addSentGcode('<<< WebInterface Init Start >>>');
        showInfo('Fetching settings from SMuFF, please wait...');
        var stat = true;
        for(var i=0; i< cmds.length; i++) {
            if(isTestRunning)
                break;
            if(!await sendInitSeq(cmds[i])) {
                stat = false;
                break;
            }
            if(initDone)
                break;
        }
        addSentGcode('<<< WebInterface Init End >>>');
        cancelInfo();
        showChangesPending(false);
        initDone = true;
        return stat;
    }
    catch(e) {
        console.log(e);
    }
    return false;
}


async function listenToSerial() {
    const textDecoder = new TextDecoderStream();
    readableStream = port.readable.pipeTo(textDecoder.writable);
    reader = textDecoder.readable.getReader();
    
    portListener = true;

    var data = '';
    // Listen to data coming from the serial device.
    while (true) {
        const { value, done } = await reader.read();
        if(value)
            data += value;
        while(data.length) {
            var nl = data.indexOf('\n');
            if(nl != -1) {
                var line = data.substring(0, nl);
                await parseResponse(line);
                if(collectResponse) {
                    if(line != 'ok')
                        responseBuffer += line + '\n';
                }
                data = data.substring(nl+1);
            }
            else
                break;
        }
        if (done) {
            reader.releaseLock();
            break;
        }
    }
    portListener = false;
    showConnect();
}

async function parseResponse(line) {
    prevLine = line;
    //console.log('Recv: ' + line);
    if(!isPurging && !isShowingLoading && !isShowingUnloading)
        cancelInfo();
    if(line.startsWith('ok')) {
        seenOk = true;
        if(isShowingLoading || isShowingUnloading) {
            if(!isPurging)
                    cancelInfo();
            isShowingLoading = false;
            isShowingUnloading = false;
        }
        if(!initDone)
            return;
    }
    else if(line.startsWith('error:')) {
        seenError = true;
        if(line.substring(7)=='BUSY')
            showToast('SMuFF is BUSY');
        console.log('Errors seen: ' + seenError + ' [ ' + prevLine + ' ]');
    }
    else if(line=='start') {
        // after RESET
        requestInit();
    }
    else if(line.startsWith('echo: Serial:')) {
        currentSerial = parseInt(line.substring(14));
        $('#curSerial'+currentSerial).removeClass('hidden');
        return;
    }
    else if(line.startsWith('echo: states:')) {
        isPurging = isShowingLoading = isShowingUnloading = false;
        setStatus(line);
        return;
    }
    else if(line.startsWith('echo: testrun:')) {
        setTestResults(line);
        showTestRunning(true);
        return;
    }
    else if(line.startsWith('echo: purging:')) {
        isPurging = true;
        showPurging(line.substring(15));
        return;
    }
    else if(line.startsWith('echo: speed:')) {
        xlatedSpeed = line.substring(12);
        //console.log('Translated speed: ' +xlatedSpeed);
        return;
    }
    else if(line.startsWith('echo: INT') || line.startsWith('echo: EXT')) {
        setRelayState(line.substring(6));
        if(!initDone)
            return;
    }
    else if(line.startsWith('FIRMWARE_NAME')) {
        setFWInfo(line);
    }
    else if(line.startsWith('M17')) {
        if(!initDone)
            return;
    }
    else if(line.startsWith('Unknown parameter \'WebInterface')) {
        initDone = true;
        showError('Apparently, this SMuFF-Firmware version is <b>less than 2.26</b>! Please update your firmware for this app.');
        return;
    }
    else if(line.startsWith('/*')) {
        configType = line.replace('/*','').replace('*/','').trim();
        //console.log('ConfigType: ' +configType);
        if(!initDone) {
            if(configType.startsWith('Testscripts')) {
                addTestFiles(configType.substring(12));
                configType ='';
            }
            return;
        }
    }
    else if(line.startsWith('{"')) {
        if (line.indexOf('TMCStatus') > -1)
            configType = 'TMC';
        setSettings(line, configType);
        if(!initDone)
            return;
    }
    else if(line.startsWith('M122')) {
        if(!initDone)
            return;
    }
    else if(line.startsWith('M205')) {
        if(!initDone)
            return;
    }
    else if(line.startsWith('M503')) {
        if(!initDone)
            return;
    }
    addReceivedGcode(line.replaceAll(' ', '&nbsp;'));
}

const DEFAULTS = {
  treshold: 2,
  maximumItems: 5,
  highlightTyped: true,
  highlightClass: 'text-primary',
};

class Autocomplete {
  constructor(field, options) {
    this.field = field;
    this.options = Object.assign({}, DEFAULTS, options);
    this.dropdown = null;

    field.parentNode.classList.add('dropdown');
    field.setAttribute('data-toggle', 'dropdown');
    field.classList.add('dropdown-toggle');

    const dropdown = ce(`<div class="dropdown-menu" ></div>`);
    if (this.options.dropdownClass)
      dropdown.classList.add(this.options.dropdownClass);

    insertAfter(dropdown, field);

    this.dropdown = new bootstrap.Dropdown(field, this.options.dropdownOptions)

    field.addEventListener('click', (e) => {
      if (this.createItems() === 0) {
        e.stopPropagation();
        this.dropdown.hide();
      }
    });

    field.addEventListener('input', () => {
      if (this.options.onInput)
        this.options.onInput(this.field.value);
      this.renderIfNeeded();
    });

    field.addEventListener('keydown', (e) => {
      if (e.keyCode === 27) {
        this.dropdown.hide();
        return;
      }
      if (e.keyCode === 40) {
        this.dropdown._menu.children[0]?.focus();
        return;
      }
    });
  }

  setData(data) {
    this.options.data = data;
    this.renderIfNeeded();
  }

  renderIfNeeded() {
    if (this.createItems() > 0)
      this.dropdown.show();
    else
      this.field.click();
  }

  createItem(lookup, item) {
    let label;
    if (this.options.highlightTyped) {
      const idx = item.label.toLowerCase().indexOf(lookup.toLowerCase());
      const className = Array.isArray(this.options.highlightClass) ? this.options.highlightClass.join(' ')
        : (typeof this.options.highlightClass == 'string' ? this.options.highlightClass : '')
      label = item.label.substring(0, idx)
        + `<span class="${className}">${item.label.substring(idx, idx + lookup.length)}</span>`
        + item.label.substring(idx + lookup.length, item.label.length);
    } else
      label = item.label;
    return ce(`<button type="button" class="dropdown-item" data-value="${item.value}">${label}</button>`);
  }

  createItems() {
    const lookup = this.field.value;
    if (lookup.length < this.options.treshold) {
      this.dropdown.hide();
      return 0;
    }

    const items = this.field.nextSibling;
    items.innerHTML = '';

    let count = 0;
    for (let i = 0; i < this.options.data.length; i++) {
      const {label, value} = this.options.data[i];
      const item = {label, value};
      if (item.label.toLowerCase().indexOf(lookup.toLowerCase()) >= 0) {
        items.appendChild(this.createItem(lookup, item));
        if (this.options.maximumItems > 0 && ++count >= this.options.maximumItems)
          break;
      }
    }

    this.field.nextSibling.querySelectorAll('.dropdown-item').forEach((item) => {
      item.addEventListener('click', (e) => {
        let dataValue = e.target.getAttribute('data-value');
        this.field.value = e.target.innerText;
        if (this.options.onSelectItem)
          this.options.onSelectItem({
            value: e.target.dataset.value,
            label: e.target.innerText,
          });
        this.dropdown.hide();
      })
    });

    return items.childNodes.length;
  }
}

/**
 * @param html
 * @returns {Node}
 */
function ce(html) {
  let div = document.createElement('div');
  div.innerHTML = html;
  return div.firstChild;
}

/**
 * @param elem
 * @param refElem
 * @returns {*}
 */
function insertAfter(elem, refElem) {
  return refElem.parentNode.insertBefore(elem, refElem.nextSibling)
}
$(document).ready(function(){

    // show or hide TMC parameters depending on TMC-Mode
    $('#Tools').on('change', function() {
        var toolcnt = parseInt($('#Tools').val());
        var parent = $('#tool-selection');
        parent.empty();
        parent.append('<option value="-1">T--</option>');
        for(var i=0; i < toolcnt; i++) {
            parent.append('<option value="T'+i+'">T'+i+'</option>');
        }
        parent = $('#form-materials');
        parent.empty();
        parent.append('<datalist id="datalistColors"></datalist>');
        parent.append('<datalist id="datalistMaterials"></datalist>');
        var list = parent.find('datalist[id="datalistColors"]');
        for(key in Object.keys(colorNames)) {
            var opt = '<option value="' + colorNames[key]['label']+ '"/>'
            list.append(opt);
        }
        list = parent.find('datalist[id="datalistMaterials"]');
        for(key in Object.keys(materialNames)) {
            var opt = '<option value="' + materialNames[key]['label']+ '"/>'
            list.append(opt);
        }

        var template = $('#materials-template');
        for(var i=0; i < toolcnt; i++) {
            var row = template.clone(true);
            row.prop('id', 'materials-tool-'+i);
            row.removeClass('hidden');
            row.find('label').text('T'+i+':');
            row.find('input').each(function(){
                $(this).prop('id', $(this).prop('name')+i);
                $(this).attr('data-section', 'S5');
                $(this).attr('data-subsection', 'T'+i);
            });
            parent.append(row);
            /*
            var field = document.getElementById('Color-'+i);
            setAutocompleteColors(field);
            var field = document.getElementById('Material-'+i);
            setAutocompleteMaterials(field);
            */
        }
        parent = $('#form-servomaps');
        parent.empty();
        var template = $('#servomap-template');
        for(var i=0; i < toolcnt; i++) {
            var row = template.clone(true);
            row.prop('id', 'servomap-'+i);
            row.removeClass('hidden');
            row.find('label').text('T'+i+':');
            row.find('input').each(function(){
                $(this).prop('id', $(this).prop('name')+i);
                $(this).attr('data-section', 'S4');
                $(this).attr('data-subsection', 'T'+i);
                if(!hasMultiservo && $(this).prop('name')=='Output-') {
                    $(this).addClass('hidden');
                    $('#caption-multiservo').hide();
                }
            });
            parent.append(row);
        }
        if(hasMultiservo) {
            var row = template.clone(true);
            row.prop('id', 'servomap-wiper');
            row.removeClass('hidden');
            row.find('label').text('Wiper:');
            row.find('input').each(function(){
                $(this).prop('id', $(this).prop('name')+'Wiper');
                $(this).attr('data-section', 'S4');
                $(this).attr('data-subsection', 'Wiper');
            });
            parent.append(row);
        }
        for(var i=MAX_TOOLS-1; i >= toolcnt; i--) {
            $('#tst-t'+i).parent().hide();
        }
        setSwaps();
    });

    $('#SpdsInMms').on('click', function(){
        setTimeout(function(){
            recalculateSpeeds();
        }, 750);
    });
    
    $('#Feeder-SharedStepper').on('change', function(){
        hasSharedStepper = $(this).is(':checked');
        setDisabled(!hasSharedStepper, '.hasSharedStepper');
    });

    $('#Feeder-UseEStop2').on('change', function(){
        setDisabled(!$(this).is(':checked'), '.has2ndEndstop');
    });
    
    $('#Feeder-ExtCtrl').on('change', function(){
        hasExtCtrl = $(this).is(':checked');
        setDisabled(hasExtCtrl, '.hasNotExtCtrl');
    });

    $('#UseCutter').on('change', function(){
        setDisabled(!$(this).is(':checked'), '.hasCutter');
    });

    $('#Revolver-UseServo').on('change', function(){
        if(hasV6S)
            $(this).removeAttr('checked');
        setDisabled(!$(this).is(':checked'), '.hasServo');
    });
    
    $('#InvRelay').on('change', function(){
        setTimeout(async function() {
            sendGcode('M17', true, false);
            await getResponse();
        }, 500);
    });

    $('#Selector-TMC-Mode').on('change', function(){
        if($(this).val()==1) {
            $('#Selector-TMC-Params').show('slow');
            $('#Selector-MS3').val(0).trigger('change');
        }
        else $('#Selector-TMC-Params').hide('slow');
    });
    
    $('#Feeder-TMC-Mode').on('change', function(){
        if($(this).val()==1) {
            $('#Feeder-TMC-Params').show('slow'); 
            $('#Feeder-MS3').val(0).trigger('change');
        }
        else $('#Feeder-TMC-Params').hide('slow');
    });
    
    $('#Revolver-TMC-Mode').on('change', function(){
        if($(this).val()==1) {
            $('#Revolver-TMC-Params').show('slow'); 
            $('#Revolver-MS3').val(0).trigger('change');
            $('#Revolver-UseServo').prop('checked', false).trigger('change');
        }
        else $('#Revolver-TMC-Params').hide('slow');
    });
    
    $('#Selector-MS3').on('change', function(){
        if($(this).val()>0) {
            $('#Selector-TMC-Mode').val(0).trigger('change');
        }
    });
    
    $('#Feeder-MS3').on('change', function(){
        if($(this).val()>0) {
            $('#Feeder-TMC-Mode').val(0).trigger('change');
        }
    });
    
    $('#Revolver-MS3').on('change', function(){
        if($(this).val()>0) {
            $('#Revolver-TMC-Mode').val(0).trigger('change');
        }
    });
    
});